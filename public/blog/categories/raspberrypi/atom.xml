<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RaspberryPi | The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-05-16T23:10:26-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Python Library]]></title>
    <link href="http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library/"/>
    <updated>2014-05-16T00:15:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<p>I created a python module that makes interacting with specific hardware easy. You can find it here:
<a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<hr/>


<p>I&rsquo;ve found myself writing quite a bit of code lately to interface with different pieces of hardware on the Raspberry Pi. I finally realized that for every new project I was copying the same code from the previous project to do things like turn on an LED or read the state of a switch. I decided that it was time to take all of that work and put it into a library that I could easily reuse with each project.</p>

<h2>Simple Example</h2>

<p>The python and node modules I&rsquo;ve used to create projects in the past are very simple and generally easy to use. What they don&rsquo;t provide, and aren&rsquo;t meant to provide, is a higher level of abstraction around certain pieces of hardware. For example, let&rsquo;s look at the <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor</a>.</p>

<h1 style="text-align:center;"><img src="/images/tmp102.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>TMP102 image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>




<!-- more -->


<p>It&rsquo;s an I²C temperature sensor that will return a reading of the current temperature. But like any I²C module you need to know things like what registers to set and read to get that reading and how the reading is returned by the sensor. For this sensor the current reading is accessed via register 0x00 of the module and is returned as a 12-bit value which requires a two byte read. Then you have to know that the value you get back is an integer that needs to be multiplied by .0625 to get a reading in degrees Celsius. Here&rsquo;s what the code looks like.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smbus</span>
</span><span class='line'><span class="n">bus</span> <span class="o">=</span> <span class="n">smbus</span><span class="o">.</span><span class="n">SMBus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">bus</span><span class="o">.</span><span class="n">read_word_data</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">byte1_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b0000000011111111</span>
</span><span class='line'><span class="n">byte2_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1111111100000000</span>
</span><span class='line'><span class="n">byte1</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">byte1_mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">byte2</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">byte2_mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">=</span> <span class="n">byte2</span> <span class="o">|</span> <span class="n">byte1</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">*=</span> <span class="o">.</span><span class="mo">0625</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Not overly complicated but it took some work and time reading through the datasheet. Now apply this to everything in your project; display, buttons, switches, etc.</p>

<h2>Gimme the Abstraction</h2>

<p>What I wanted was to drop a module into my project that had all of this code I previously figured out wrapped up nicely and ready to use. So here is how I get a temperature reading from the TMP102 with the ucasts Raspberry Pi python module.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">ucasts</span> <span class="kn">import</span> <span class="n">TMP102</span>
</span><span class='line'><span class="n">temp_sensor</span> <span class="o">=</span> <span class="n">TMP102</span><span class="p">()</span>
</span><span class='line'><span class="n">tempF</span> <span class="o">=</span> <span class="n">temp_sensor</span><span class="o">.</span><span class="n">get_temp_in_f</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The library handles the I²C bus and all other sensor-specific details. I&rsquo;ve added a handful of components already and intend to expand it as I experiment with more modules for &micro;Cast episodes. I&rsquo;ve tried to thoroughly document it so it&rsquo;s easy to pick up and use.</p>

<p><a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<p>If you do use the library I&rsquo;d love to hear about it and I&rsquo;m always happy to answer any questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #16: Pi + Express + Bootstrap + Angular FTW!]]></title>
    <link href="http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular/"/>
    <updated>2014-04-14T23:19:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]:</strong> I&rsquo;ve had requests to post the finished code on Github for those that want to just play with the completed app. It&rsquo;s now available at <a href="https://github.com/sidwarkd/pimonitor">https://github.com/sidwarkd/pimonitor</a>.</p>

<p>About a month ago I came across the <a href="http://lifehacker.com/command-pi-monitors-your-raspberry-pi-from-your-phone-1561340630">CommandPi</a> iOS app. It looked interesting so I paid the 99 cents and downloaded it to my iPad. The problem was, it didn&rsquo;t work. I would provide my SSH credentials and after logging in the program would crash. So like any curious developer, instead of waiting for a fix I set out to write my own.</p>

<p>To be fair to the creator of <a href="https://itunes.apple.com/us/app/command-pi/id830462681?mt=8">CommandPi</a>, what you are about to see is not meant to take anything away from that app. The app creator has put together a very nice UI and the crashing issue has been fixed. I just wanted to see how easy or hard it would be to create a knock off using <a href="http://expressjs.com/">ExpressJS</a>, <a href="http://angularjs.org/">Angular</a> and <a href="http://getbootstrap.com/">Bootstrap</a>.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/zprWNhB0NeU" frameborder="0" allowfullscreen></iframe>




<!-- more -->




<br/>


<br/>


<p>In <a href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/">µCast #14</a> and <a href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/">µCast #15</a> we created the plumbing necessary to grab most of the information necessary to create our app. We also expose the <a href="http://blog.microcasts.tv/2013/10/25/query-temperature-on-raspberry-pi/">temperature reading given by the Pi</a>. This episode was shot in a single take (with light editing for time) showing how to pull various technologies together to create a web application for monitoring our Raspberry Pi.</p>

<p>This is the pinode_stats.gist used in the video.</p>

<p><div><script src='https://gist.github.com/sidwarkd/10226198.js?file=pinode_stats.js'></script>
<noscript><pre><code>'use strict'

// An example of accessing system information on the Raspberry Pi with NodeJS

var fs = require('fs');

var PiStats = function(){
  var stats = {};
  var _currentCPUInfo = {total:0, active:0};
  var _previousCPUInfo = {total:0, active:0};

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      stats.memTotal = Math.floor(getValFromLine(lines[0]) / 1024);
      stats.memFree = Math.floor(getValFromLine(lines[1]) / 1024);
      stats.memCached = Math.floor(getValFromLine(lines[3]) / 1024);
      stats.memUsed = stats.memTotal - stats.memFree;
      stats.memPercentUsed = Math.ceil(((stats.memUsed - stats.memCached) / stats.memTotal) * 100);

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    _previousCPUInfo.active = _currentCPUInfo.active;
    _previousCPUInfo.idle = _currentCPUInfo.idle;
    _previousCPUInfo.total = _currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      _currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      _currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        _currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      _currentCPUInfo.active = _currentCPUInfo.total - _currentCPUInfo.idle
      _currentCPUInfo.percentUsed = calculateCPUPercentage(_previousCPUInfo, _currentCPUInfo);

      stats.cpuUsage = _currentCPUInfo.percentUsed;

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var getCurrentTemperature = function(cb){
    // Uncomment the next 3 lines for testing on regular linux and comment
    // out the fs.readFile block
    //stats.tempC = 42.3;
    //stats.tempF = 102.5;
    //cb(null, stats);
    fs.readFile('/sys/class/thermal/thermal_zone0/temp', 'utf8', function(err, data){
      var temp = data.match(/[0-9]+/gi);
      stats.tempC = parseInt(temp[0]) / 1000;
      stats.tempF = stats.tempC * 1.80 + 32.00;

      if(cb !== undefined)
        cb(null, stats);
    });
  }

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    update: function(cb){
      getMemoryInfo(function(err, data){
        getCPUInfo(function(err1, data1){
          getCurrentTemperature(function(err2, data2){
            cb(err2, data2);
          });
        });
      });
    },
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
        return;
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

module.exports = PiStats;

// Example usage

// var stats = require('./pinode_stats.js');
// stats.update(function(err, data){
//   console.log(data);
// });

</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Hacking Cheat Sheet]]></title>
    <link href="http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet/"/>
    <updated>2014-04-02T23:29:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet</id>
    <content type="html"><![CDATA[<h1 style="text-align:center"><a href="http://blog.microcasts.tv/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf"><img src="http://blog.microcasts.tv/images/cheat_sheet_img.jpg" alt="Cheat Sheet Image"/></a></h1>


<p>As part of my Skillshare class <a href="http://www.skillshare.com/classes/technology/Unleash-The-Raspberry-Pi-Through-Physical-Computing/2109089069">Unleash The Raspberry Pi Through Physical Computing</a> I created a cheat sheet that I reference when working on hardware projects involving the Pi.</p>

<p>You may find it useful when working on your own projects so feel free to download and share. Let me know if you think I&rsquo;m missing something important. I&rsquo;m working on an HTML version and will update this post when it&rsquo;s ready.</p>

<p><a href="/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf">Rasperry Pi Hacker&rsquo;s Cheat Sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #15: CPU Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-20T22:41:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this µCast we cover the very basics of CPU usage on the Raspberry Pi and show you how to figure out how hard your ARM processor is working in realtime.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/DqGVTUsMuFI" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code contain the memory examples from µCast #14 as well as the CPU usage code in Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<p><div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>
</p>

<h3>Python Sample</h3>

<p><div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #14: Memory Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-15T23:37:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this µCast we cover the very basics of RAM usage on the Raspberry Pi and show you how to figure out how much memory your Pi is using at any given time and how to get some of it back.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/EqyVlTP4R5M" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code are just quick examples of how you can query memory information using Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<p><div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>
</p>

<h3>Python Sample</h3>

<p><div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
