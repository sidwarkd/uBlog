<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RaspberryPi | The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-10-16T22:08:22-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cereal Box Pi Cases]]></title>
    <link href="http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases/"/>
    <updated>2014-09-24T09:32:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases</id>
    <content type="html"><![CDATA[<h1 style="text-align:center;"><img src="/images/cereal_cases.jpg" width="640" height="360"></h1>


<p>So last week I found a pic on Imgur posted by quantumCity showing a <a href="https://imgur.com/gallery/8RLUdNb">Raspberry Pi case made from a manila folder</a>. Needless to say I found it to be a pretty neat way to throw together a case from something lying around the house that didn&rsquo;t consist of using Legos. He posted the CAD file and a pdf version so all you have to do is print it, transfer it, cut it, and fold it. It worked like a charm on the first try.</p>

<!-- more -->


<p>The only problem was that I found it to be a little flimsy for my taste, not to mention kinda plain. So I had the idea to try using a cereal box which is made of a sturdier, yet still thin enough, material. I raided the pantry and pretty soon had Captain Crunch staring on the case of my Model B+ Pi. After that I was obsessed and spent the time to create printouts for the Model A and B and want to share them with the community.</p>

<h3>Sorry, No CAD Files</h3>

<p>I found the original .dwg file to be a huge pain as I wasn&rsquo;t able to easily modify it and my PC didn&rsquo;t want to install any of the open source programs capable of working with it. So I created my models in <a href="http://www.sketchup.com/">SketchUp</a> and have included those files as well as a to-scale PDF that you can just print and use for each.</p>

<ul>
<li> <a href="/assets/ModelA_case.skp">Model A Sketchup File</a></li>
<li> <a href="/assets/ModelA_case.pdf">Model A PDF</a></li>
<li> <a href="/assets/ModelB_case.skp">Model B Sketchup File</a></li>
<li> <a href="/assets/ModelB_case.pdf">Model B PDF</a></li>
</ul>


<p><strong>NOTE:</strong> If you try to print the PDF you need to make sure there is no scaling in the print settings like Fit to Page. Otherwise the dimensions won&rsquo;t be quite right.</p>

<h3>Get Creative</h3>

<p>There are so many things that could work as a medium here and I&rsquo;d love to see what people come up with. Feel free to modify the design too. You could cut out the back corner to allow access to the GPIO header or even cut some sweet vent designs if you&rsquo;re worried about overheating. If you make a case using one of the plans I would love it if you linked to a picture in the comments.</p>

<h1 style="text-align:center;"><img src="/images/puffs_case_small.png" width="600" height="600"></h1>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #18: Configure the Serial Port on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/08/08/configure-the-serial-port-on-the-raspberry-pi/"/>
    <updated>2014-08-08T22:08:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/08/08/configure-the-serial-port-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Did you even know the Raspberry Pi had a serial port? If you did and have tried to use it in Raspbian you&rsquo;ve probably run in to some weird behavior. That&rsquo;s because, by default, the serial port is tied up by the operating system so it can&rsquo;t be reliably used in your projects. In this episode I show you how to configure the serial port so it can be used to make your awesome ideas reality.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/bKHLTn_nXUM" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<h2>TL;DR</h2>

<p>All you have to do is modify two files to reclaim the serial port from Raspbian. The rest of this post shows you how.</p>

<h3>/etc/inittab</h3>

<p>Comment out the line near the very bottom that spawns a getty using the serial port.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Spawn a getty on Raspberry Pi serial line&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100  &amp;lt;&amp;mdash;&amp;mdash; comment this line&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>/boot/cmdline.txt</h3>

<p>Be careful with this one as it contains the parameters sent to the kernel at startup. You need to remove any references to ttyAMA0,115200.</p>

<p>So you would change this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dwc_otg.lpm_enable<span class="o">=</span>0 <span class="nv">console</span><span class="o">=</span>ttyAMA0,115200 <span class="nv">kgdboc</span><span class="o">=</span>ttyAMA0,115200 <span class="nv">console</span><span class="o">=</span>tty1 <span class="nv">root</span><span class="o">=</span>/dev/mmcblk0p2 <span class="nv">rootfstype</span><span class="o">=</span>ext4 rootwait
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dwc_otg.lpm_enable<span class="o">=</span>0 <span class="nv">console</span><span class="o">=</span>tty1 <span class="nv">root</span><span class="o">=</span>/dev/mmcblk0p2 <span class="nv">rootfstype</span><span class="o">=</span>ext4 rootwait
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Physical Yo Button]]></title>
    <link href="http://blog.microcasts.tv/2014/06/25/a-physical-yo-button/"/>
    <updated>2014-06-25T15:03:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/25/a-physical-yo-button</id>
    <content type="html"><![CDATA[<p>I think we&rsquo;re all still trying to figure out what Yo&rsquo;s place is in the internet family but as of right now it&rsquo;s basically a viral app. As soon as I found out there was an API for it I just knew I had to attach some hardware to it. Here&rsquo;s a demo of what I put together.</p>

<p>The whole thing took me about 4 hours once I resolved my API issue (I originally gave them the wrong URL for the callback and had to email them to fix it). I want to share the process in case other people want to integrate Yo with hardware.</p>

<h1 style="text-align:center;"><img src="/images/yo_post.jpg" width="640" height="400"></h1>




<!-- more -->


<h2>Proof It Works</h2>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/9c45uJmmYs4" frameborder="0" allowfullscreen></iframe>


<h2>How It Works</h2>

<p>You send a Yo to UCASTS to subscribe &mdash;&ndash;> My live yo counter increments &mdash;&ndash;> Anytime I push the magic button all of my subscribers get a Yo!.</p>

<p>In terms of hardware you can customize this process to be very customizable.</p>

<ol>
<li> User subscribes to your Yo feed</li>
<li> A callback allows you to execute some action when someone subscribes</li>
<li> You now have the ability to easily send a Yo to all of your subscribers based on any trigger you can think of.</li>
</ol>


<h2>Understanding the API</h2>

<p>To sign up for the API just head over to <a href="http://yoapi.justyo.co/">http://yoapi.justyo.co/</a>. You&rsquo;ll be walked through a few simple steps to get things set up. If you want notifications when people subscribe you&rsquo;ll need to specify a callback url that the api can call. Once you&rsquo;ve finished filling out the form you&rsquo;ll have to wait for Yo to email you your api token. Mine took overnight but I didn&rsquo;t register until later in the afternoon.</p>

<p>Once you have your api token all you have to do to send a Yo to all of your subscribers is POST your api token to <strong>api.justyo.co/yoall/</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl &amp;mdash;data “api_token<span class="o">=[</span>your_api_token<span class="o">]</span>” &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://api.justyo.co/yoall/&quot;</span>&gt;http://api.justyo.co/yoall/&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s all there is to it.</p>

<h2>The Server</h2>

<p>So there are really two parts to this. We need a backend to handle the callback requests from the Yo api and a client running on the Pi to handle our hardware interaction. Let&rsquo;s start with the server. This is really quite simple. I created an <a href="http://expressjs.com">Express</a> website that I pushed to <a href="https://heroku.com">Heroku</a> and then pointed one of my domains to it. In <a href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/">&micro;Cast #17</a> I showed how to set up <a href="http://socket.io/download/">Socket.IO</a> with Express and that&rsquo;s all I did here with one change. Because the socket.io server reuses the regular express server I had to define a route in the <strong>www</strong> file which also meant I had to move the 404 and error handler there. Here&rsquo;s what I ended up with in <strong>www</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;!</span><span class="err">/usr/bin/env node&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">debug</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">microcasts</span><span class="o">-</span><span class="nx">tv</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;..</span><span class="o">/</span><span class="nx">app</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">port</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/new&amp;rsquo;, function(req, res){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">yoReceived</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/new&amp;rsquo;, function(req, res){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">yoReceived</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">/// catch 404 and forward to error handler</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'><span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">/// error handlers&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// development error handler</span>
</span><span class='line'><span class="c1">// will print stacktrace</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">env</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">===</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">development</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// production error handler</span>
</span><span class='line'><span class="c1">// no stacktraces leaked to user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">error</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">port</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Express</span> <span class="nx">server</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">io</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So when a request to my callback url happens I simply emit a message to the client running on the Raspberry Pi.</p>

<h2>The Pi Client</h2>

<p>The client piece of this project was fairly simple given the fact that I already had a display and button wired up on a breadboard and connected to a Pi. The first piece to the client is listening for websocket messages from the server to detect new subscribers. That&rsquo;s as easy as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">io</span><span class="o">-</span><span class="nx">client</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://yo.microcasts.tv&quot;</span><span class="o">&gt;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//yo.microcasts.tv&lt;/a&gt;&amp;rsquo;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">yoCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">connect</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Connected</span> <span class="nx">to</span> <span class="nx">server</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">yoReceived</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Increment the yo count and update display</span>
</span><span class='line'><span class="nx">yoCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">yoCount</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;m using the <a href="https://www.npmjs.org/package/spi">spi</a> package to connect to <a href="https://www.sparkfun.com/products/11442">my display</a>. I don&rsquo;t store the count anywhere locally at this point. I just count the Yos I&rsquo;ve gotten since launching the program but it would be trivial to store that info and track your Yo total. Every time I get a new websocket message I just update the display.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">spi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SPI</span><span class="p">.</span><span class="nx">Spi</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/dev/spidev0.0&amp;rsquo;);</span>
</span><span class='line'><span class="nx">spi</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearMsg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x76</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearRx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x00</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">clearMsg</span><span class="p">,</span> <span class="nx">clearRx</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final piece to the client is sending a Yo to all of my followers when I push a button. Since the API is so simple we can accomplish that with just 12 lines of code if we use <a href="https://www.npmjs.org/package/requestify">Requestify</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gpio18</span> <span class="o">=</span> <span class="nx">gpio</span><span class="p">.</span><span class="kr">export</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="p">{</span><span class="nx">direction</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="k">in</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){}});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Listen for button presses</span>
</span><span class='line'><span class="nx">gpio18</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">change</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;You pressed the button&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">requestify</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://api.justyo.co/yoall/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">api_token</span><span class="o">:</span> <span class="s2">&quot;[your token]&quot;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Yo sent to subscribers!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusion</h2>

<p>My one regret with this project was that I didn&rsquo;t have one of these from Sparkfun on hand:</p>

<h1 style="text-align:center;"><img src="/images/blue_dome_button.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>Image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>


<p>I create <a href="https://gist.github.com/sidwarkd/355de4e13f624825a838">a Gist that has the meat of the code</a> if you&rsquo;re interested.</p>

<p>Got any ideas on how to integrate hardware with the Yo API? I&rsquo;d love to here about it.</p>

<p><strong>If this article brought you any value at all I&rsquo;d really appreciate it if you would share it using the buttons below</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #17: Control Hardware Remotely With Socket.IO]]></title>
    <link href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/"/>
    <updated>2014-06-21T00:13:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been paying attention to hardware lately you&rsquo;ve probably noticed how people have gone insane over remotely accessing their devices. In this &micro;Cast I&rsquo;ll show you a simple way to get your project setup so that you can talk to it and control it via the interwebs. The best part, it only takes about 20 minutes.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/z3O26CC9nAc" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<p>We&rsquo;ll pull together all kinds of awesomeness using</p>

<ul>
<li><a href="http://socket.io/download/">SocketIO</a></li>
<li><a href="http://nodejs.org">Node</a></li>
<li><a href="http://expressjs.com">Express</a></li>
<li><a href="https://heroku.com">Heroku</a> by using the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li>and more</li>
</ul>


<p>Credit to <a href="https://twitter.com/HugoGiraudel">Hugo Giraudel</a> for the <a href="http://tympanus.net/codrops/2012/09/13/button-switches-with-checkboxes-and-css3-fanciness/">awesome CSS styled checkbox</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwest 2014 Presentation]]></title>
    <link href="http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation/"/>
    <updated>2014-06-02T23:06:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation</id>
    <content type="html"><![CDATA[<p>My presentation from the Openwest Conference has posted to YouTube.</p>

<div class="videoblob">
<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/fSqFgc-U_ZI" frameborder="0" allowfullscreen></iframe>
</div>


<p>Really appreciated the opportunity I had to present and loved meeting some new people. Looking forward to attending next year.</p>
]]></content>
  </entry>
  
</feed>
