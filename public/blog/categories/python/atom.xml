<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-10-16T22:08:22-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openwest 2014 Presentation]]></title>
    <link href="http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation/"/>
    <updated>2014-06-02T23:06:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation</id>
    <content type="html"><![CDATA[<p>My presentation from the Openwest Conference has posted to YouTube.</p>

<div class="videoblob">
<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/fSqFgc-U_ZI" frameborder="0" allowfullscreen></iframe>
</div>


<p>Really appreciated the opportunity I had to present and loved meeting some new people. Looking forward to attending next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Python Library]]></title>
    <link href="http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library/"/>
    <updated>2014-05-16T00:15:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<p>I created a python module that makes interacting with specific hardware easy. You can find it here:
<a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<hr/>


<p>I&rsquo;ve found myself writing quite a bit of code lately to interface with different pieces of hardware on the Raspberry Pi. I finally realized that for every new project I was copying the same code from the previous project to do things like turn on an LED or read the state of a switch. I decided that it was time to take all of that work and put it into a library that I could easily reuse with each project.</p>

<h2>Simple Example</h2>

<p>The python and node modules I&rsquo;ve used to create projects in the past are very simple and generally easy to use. What they don&rsquo;t provide, and aren&rsquo;t meant to provide, is a higher level of abstraction around certain pieces of hardware. For example, let&rsquo;s look at the <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor</a>.</p>

<h1 style="text-align:center;"><img src="/images/tmp102.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>TMP102 image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>




<!-- more -->


<p>It&rsquo;s an I²C temperature sensor that will return a reading of the current temperature. But like any I²C module you need to know things like what registers to set and read to get that reading and how the reading is returned by the sensor. For this sensor the current reading is accessed via register 0x00 of the module and is returned as a 12-bit value which requires a two byte read. Then you have to know that the value you get back is an integer that needs to be multiplied by .0625 to get a reading in degrees Celsius. Here&rsquo;s what the code looks like.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smbus</span>
</span><span class='line'><span class="n">bus</span> <span class="o">=</span> <span class="n">smbus</span><span class="o">.</span><span class="n">SMBus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">bus</span><span class="o">.</span><span class="n">read_word_data</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">byte1_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b0000000011111111</span>
</span><span class='line'><span class="n">byte2_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1111111100000000</span>
</span><span class='line'><span class="n">byte1</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">byte1_mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">byte2</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">byte2_mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">=</span> <span class="n">byte2</span> <span class="o">|</span> <span class="n">byte1</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">*=</span> <span class="o">.</span><span class="mo">0625</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Not overly complicated but it took some work and time reading through the datasheet. Now apply this to everything in your project; display, buttons, switches, etc.</p>

<h2>Gimme the Abstraction</h2>

<p>What I wanted was to drop a module into my project that had all of this code I previously figured out wrapped up nicely and ready to use. So here is how I get a temperature reading from the TMP102 with the ucasts Raspberry Pi python module.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">ucasts</span> <span class="kn">import</span> <span class="n">TMP102</span>
</span><span class='line'><span class="n">temp_sensor</span> <span class="o">=</span> <span class="n">TMP102</span><span class="p">()</span>
</span><span class='line'><span class="n">tempF</span> <span class="o">=</span> <span class="n">temp_sensor</span><span class="o">.</span><span class="n">get_temp_in_f</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The library handles the I²C bus and all other sensor-specific details. I&rsquo;ve added a handful of components already and intend to expand it as I experiment with more modules for &micro;Cast episodes. I&rsquo;ve tried to thoroughly document it so it&rsquo;s easy to pick up and use.</p>

<p><a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<p>If you do use the library I&rsquo;d love to hear about it and I&rsquo;m always happy to answer any questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Python Scripts from Dropbox on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi/"/>
    <updated>2014-01-27T22:59:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever tried writing code on your Raspberry Pi from just the plain terminal window then you&rsquo;ve probably used Nano or Vim. If you&rsquo;re like me you wished you could have used your favorite IDE or text editor on another machine. When I develop for the Raspberry Pi my normal use case is to SSH in and write code via Nano. While this works just fine I&rsquo;d prefer to have the bigger real estate afforded by my desktop monitors.</p>

<h3>What is <code>preheat</code></h3>

<p><code>preheat</code> is my solution to this problem. It allows me to pull scripts down from my Dropbox account at execution time. When I finally decided I didn&rsquo;t want to code directly on the Pi anymore the very first thing that came to my mind was to install <a href="http://dropbox.com">Dropbox</a> on the Pi and just have it sync with a folder on my dev machine. It only took a few searches to realize that a Dropbox client for the Pi doesn&rsquo;t exist. So I found a few other solutions like <a href="http://en.wikipedia.org/wiki/Rsync">rsync</a>, <a href="http://owncloud.org">ownCloud</a> and others but everything I found was either too much work or just plain overkill for what I needed. So <code>preheat</code> was born.</p>

<p>It&rsquo;s a simple Python script that will query your Dropbox account for the file you want to run and pull it down. So normally I&rsquo;d use the following to run a script I&rsquo;m working on:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python myscript.py
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With <code>preheat</code> I would run it like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python preheat myscript.py
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I don&rsquo;t need to have <strong>myscript.py</strong> on the Raspberry Pi. It&rsquo;s on my desktop machine in a dropbox folder being updated every time I change it. When I run it via <code>preheat</code> it will scan my Dropbox account, find it, and pull it down for me.</p>

<p>If you&rsquo;d like to see how it works <a href="https://github.com/sidwarkd/preheat">check out the source code on Github</a></p>
]]></content>
  </entry>
  
</feed>
