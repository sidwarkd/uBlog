<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-10-16T22:08:22-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cereal Box Pi Cases]]></title>
    <link href="http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases/"/>
    <updated>2014-09-24T09:32:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases</id>
    <content type="html"><![CDATA[<h1 style="text-align:center;"><img src="/images/cereal_cases.jpg" width="640" height="360"></h1>


<p>So last week I found a pic on Imgur posted by quantumCity showing a <a href="https://imgur.com/gallery/8RLUdNb">Raspberry Pi case made from a manila folder</a>. Needless to say I found it to be a pretty neat way to throw together a case from something lying around the house that didn&rsquo;t consist of using Legos. He posted the CAD file and a pdf version so all you have to do is print it, transfer it, cut it, and fold it. It worked like a charm on the first try.</p>

<!-- more -->


<p>The only problem was that I found it to be a little flimsy for my taste, not to mention kinda plain. So I had the idea to try using a cereal box which is made of a sturdier, yet still thin enough, material. I raided the pantry and pretty soon had Captain Crunch staring on the case of my Model B+ Pi. After that I was obsessed and spent the time to create printouts for the Model A and B and want to share them with the community.</p>

<h3>Sorry, No CAD Files</h3>

<p>I found the original .dwg file to be a huge pain as I wasn&rsquo;t able to easily modify it and my PC didn&rsquo;t want to install any of the open source programs capable of working with it. So I created my models in <a href="http://www.sketchup.com/">SketchUp</a> and have included those files as well as a to-scale PDF that you can just print and use for each.</p>

<ul>
<li> <a href="/assets/ModelA_case.skp">Model A Sketchup File</a></li>
<li> <a href="/assets/ModelA_case.pdf">Model A PDF</a></li>
<li> <a href="/assets/ModelB_case.skp">Model B Sketchup File</a></li>
<li> <a href="/assets/ModelB_case.pdf">Model B PDF</a></li>
</ul>


<p><strong>NOTE:</strong> If you try to print the PDF you need to make sure there is no scaling in the print settings like Fit to Page. Otherwise the dimensions won&rsquo;t be quite right.</p>

<h3>Get Creative</h3>

<p>There are so many things that could work as a medium here and I&rsquo;d love to see what people come up with. Feel free to modify the design too. You could cut out the back corner to allow access to the GPIO header or even cut some sweet vent designs if you&rsquo;re worried about overheating. If you make a case using one of the plans I would love it if you linked to a picture in the comments.</p>

<h1 style="text-align:center;"><img src="/images/puffs_case_small.png" width="600" height="600"></h1>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specs Aren't Everything]]></title>
    <link href="http://blog.microcasts.tv/2014/09/15/specs-arent-everything/"/>
    <updated>2014-09-15T15:18:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/15/specs-arent-everything</id>
    <content type="html"><![CDATA[<p>In the last week I&rsquo;ve seen several articles pop up comparing the new Intel Edison to the Raspberry Pi to the Arduino to the [enter some other development platform here]. The problem with every single one of these is that they are missing the boat when it comes to choosing a development platform for your next project.</p>

<h2>Specs Don&rsquo;t Matter&hellip;(Mostly)</h2>

<p>The easy thing to do when you want to create a new piece of tech content is just compare the specs of the different platforms. This table was part of a recent ReadWrite article.</p>

<h1 style="text-align:center"><a href="http://blog.microcasts.tv/images/compare_table.png"><img src="http://blog.microcasts.tv/images/compare_table.png" alt="Comparison Table"/></a></h1>


<br/>


<p>At a glance you can compare the CPU speed, memory and GPIO count. What it doesn&rsquo;t show, or even help with, is how to pick one for your next DIY project.</p>

<h2>What Really Matters</h2>

<p>So what really matters when picking a platform for your next project? Normally it has nothing to do with performance specs because almost any platform will be have plenty of performance to read your sensor and display the results or push it to the web. For me the most important questions aren&rsquo;t how much flash memory a platform has or what the input voltage is. It&rsquo;s a balancing act between a few key metrics.</p>

<h3>Battery or Plugged In?</h3>

<p>What do I mean by that? Well, first and foremost you need to ask yourself &ldquo;Is my project going to be battery powered or can it always be plugged in?&rdquo; Right away this is going to limit my choices. While I love the Raspberry Pi and know that it can be battery powered I&rsquo;m probably not going to choose it because it it such a power hog when compared to something like an Arduino Uno or Sparkcore.</p>

<h3>Compute Intensive? How Intense?</h3>

<p>After thining about the power constraints, the next thing I ask is what kind of compute power do I need. What I think most newcomers miss is that a massive share of beginner projects don&rsquo;t need an ARM processor running at 700MHz. But when you compare that to the 16MHz of the Arduino Uno you may think &ldquo;Well, that&rsquo;s not going to be powerful enough.&rdquo; Remember the Apollo missions that flew rockets into outerspace (whether you believe we landed on the moon or not&hellip;we did&hellip;it&rsquo;s certain that we did launch things into orbit)? The guidance computers on those spacecraft had approximately 64K, that&rsquo;s K not M or G, of memory and ran at an astonishingly fast, at the time, 2.048MHz. You can accomplish a LOT with very little in embedded systems.</p>

<h3>Untangibles</h3>

<p>The 3rd item I focus on is how much time I want to spend on the project. A lot of this relates to what language I can program in and what the community looks like for a certain platform. Is there a lot of shared code out there I can use or do I have to write it myself? The new Intel Edison may seem like a good fit for your project because of it&rsquo;s size and specs but the community is very young still so you probably can&rsquo;t count on a lot of examples to help you along if you get stuck. Maybe a spark core would be a better fit. This final category has a lot of sub categories. What if I just really want to develop in Javascript. Well then I have to look at something like a Tessel or Raspberry Pi.</p>

<p>Sometimes you may have conflicting requirements like a device that needs to be battery powered but outputs 1080p video to a built in monitor. Just remember that there are other factors that, in my opinion, are more important than base specs. After all, if your project only needs 3 I/O pins it doesn&rsquo;t really matter if your platform has 10, 30, or 50.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&micro;Tip: Fixing Tight Breadboards]]></title>
    <link href="http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards/"/>
    <updated>2014-03-12T23:33:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards</id>
    <content type="html"><![CDATA[<p>Have you ever bought a breadboard that had extremely tight connection terminals? The kind that you can&rsquo;t connect anything to because everything just bends. I get that breadboards need to securely hold things but not being able to easily insert a resistor or capacitor is just ridiculous.</p>

<p>My suggestion is the find a breadboard the is as smooth as butter to connect to and never stray from it. Surprisingly enough, I find Radio Shack breadboards to have very nice connection terminals that require no break-in.</p>

<h3>How to Fix It</h3>

<p>If you do have a breadboard that has overly tight terminals there is an easy way to fix it although it does take a little time. Simply grab a pair of pliers and a length of male header (4 to 5 pins long). Grab the short side of the header pins firmly with the pliers and then push the header pins into the terminals. With a length of 5 pins you can handle an entire vertical row at a time. That&rsquo;s all there is to it. After doing this your components should slide easily and securely into your breadboard. Here&rsquo;s a vine showing the process.</p>

<p><iframe class='vine-embed' src='https://vine.co/v/MmxpprQ1Wlg/embed/simple' width='600' height='600' frameborder='0'></iframe><script async src='//platform.vine.co/static/scripts/embed.js' charset='utf-8'></script></p>
]]></content>
  </entry>
  
</feed>
