<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-10-16T22:08:22-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Edison Mini Breakout: The Real Getting Started Guide]]></title>
    <link href="http://blog.microcasts.tv/2014/10/16/edison-mini-breakout-the-real-getting-started-guide/"/>
    <updated>2014-10-16T13:45:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/10/16/edison-mini-breakout-the-real-getting-started-guide</id>
    <content type="html"><![CDATA[<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/wide_edison_breakout.jpg"></h1>


<p>So I sat down the other night to finally start playing with my <a href="http://www.intel.com/content/www/us/en/do-it-yourself/edison.html">Intel Edison</a> board and quickly found out that the documentation for this thing really sucks. There are forums and pages and PDFs spread all over the Intel site and most of the content centers around using the Arduino breakout board. For those of us using the <a href="https://www.sparkfun.com/products/13025">mini breakout board</a> we are left to our own resourcefulness to get this thing up and running. There is even incorrect info in the <a href="https://communities.intel.com/docs/DOC-23147">Quickstart</a> that might leave beginners scratching their heads. If Intel wants this thing to get widespread community adoption it needs to spend significantly more time making the first experience a better one.</p>

<p>Until then, here is my version of how to get started with the Edison mini breakout board. This is the guide I wish I had for my first experience.</p>

<!-- more -->


<h2>Unboxing and Setup</h2>

<p>So Intel nailed the unboxing part. The Edison comes in a sweet box and opening it evokes a few oooohs and aaahs. That&rsquo;s about where it ends though. They have a getting started url right under the box lid which makes you think that they are really going to help you through the process but unfortunately you&rsquo;re mostly on your own at this point. The link has only partially relevant instructions to the mini breakout and even some of the relevant stuff has errors.</p>

<p><strong>STOP:</strong> Installing a header is completely optional but if you intend to connect your Edison to external hardware at some point I recommend you solder one on now. You can always do it later but the tiny 70 pin Hirose connector makes me nervous so I&rsquo;d rather not stress it with unnecessary insertions and removals.</p>

<h3>Install a Header (Optional)</h3>

<p>If you intend to connect any external hardware to your Edison you&rsquo;re going to need access to the GPIO pins. These are located under the Edison itself on the breakout board.</p>

<p>You can individually solder wires to this but I personally recommend breaking all of the pins out to a header for easy connection. This is really easy to do even for a beginner so don&rsquo;t be afraid. The pins are standard 0.1&#8221; spaced so any <a href="https://www.sparkfun.com/products/116">generic male header strip</a> will do. Break the header strip into 14 pin segments and install them side by side on a breadboard as seen below. Make sure the long end of the header strip pins is in the breadboard so the short side is pointing up.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/header_guide.jpg"></h1>


<p>This will be your jig for soldering. Place the breakout board onto the pins so that the USB connectors are on top. Solding the headers in upside down will definitely ruin your day. The breakout should sit on the pins and feel nice and level. If installed correctly the header pins will just barely protrude from the holes. This ensures that they won&rsquo;t interfere with seating the Edison later on. If the pins stick out too far then you&rsquo;ve got your header installed upside down on the breadboard.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/header_pre_solder.jpg"></h1>


<p>For soldering I highly recommend using a <a href="http://www.alliedelec.com/search/productdetail.aspx?SKU=70177953">flux pen</a>. It will help the solder flow into the joints. Take your time soldering and make sure you get a good solder flow on each joint and be careful not to over-apply solder as it will ball up on the pin and not create a good joint. Here is what mine looked like when I was done. You can see that there are a few joints that aren&rsquo;t as nice as the others but we should be okay. I used some rubbing alcohol and a clean t-shirt rag to clean the flux up after soldering.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/header_post_solder.jpg"></h1>


<h3>Insert the Edison</h3>

<p>Because of the mounting holes it&rsquo;s pretty much impossible to install the Edison the wrong way on the breakout board. Just be careful seating it as the 70 pin connector has very tiny contacts that can be damaged if you&rsquo;re not careful. Get the Edison nice and level over the connector and push straight down on it right about where the sticker is below the metal housing. You should hear a good sounding click.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/push_here.jpg"></h1>


<p>Install the two nuts provided to hold the Edison in place.</p>

<h2>Install Software and Drivers</h2>

<p>The Quickstart guide provided by Intel has you install the Arduino IDE next. Now even though this isn&rsquo;t the Arduino breakout you can still write sketches and run them. You just have to break out the appropriate pins yourself. I&rsquo;m not interested in Arduino functionality so I opted to skip that part but if you want you can <a href="https://communities.intel.com/docs/DOC-23242">install that now</a>.</p>

<p>The <a href="https://communities.intel.com/docs/DOC-23147#jive_content_id_Step_3__Install_required_drivers">driver installation step</a> from the Quickstart is one of the few items they nailed in the guide and you can follow the instructions <a href="https://communities.intel.com/docs/DOC-23147#jive_content_id_Step_3__Install_required_drivers">there</a>. Basically you&rsquo;re downloading and installing two sets of drivers: one for the FTDI interface and one for the Edison itself. Here are the links for both. Just click through the installations.</p>

<h3>FTDI Drivers</h3>

<ul>
<li><a href="http://www.ftdichip.com/Drivers/CDM/CDM%20v2.10.00%20WHQL%20Certified.exe">FTDI Driver Setup</a></li>
</ul>


<h3>Edison Drivers</h3>

<ul>
<li><a href="http://downloadmirror.intel.com/24271/eng/IntelEdisonDriverSetup1.0.0.exe">Edison Windows Driver Setup</a></li>
</ul>


<h3>Terminal Emulator</h3>

<ul>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a></li>
</ul>


<p>For your computer to talk to the Edison at first you will need to use a serial connection. This is acheived over USB with the FTDI drivers which essentially speak USB to the FTDI chip on your breakout board and then the FTDI chip translates USB to serial for the Edison to understand. A terminal emulator is the program that runs on your PC that manages that connection. The most popular one is <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a> but you can use any terminal emulator you feel comfortable with.</p>

<h2>Powering Your Edison</h2>

<p>This one stumped me a little at first. There are two USB ports on the mini breakout and I assumed one was for power and communication and the other was for connecting devices to the Edison so it could act as a USB host. You probably didn&rsquo;t assume that but if you did you would be wrong&hellip;just like me. One of the USB ports is for communicating with your PC via the terminal emulator and the other is one of the ways you can power the Edison. As found in <a href="https://communities.intel.com/thread/55455">this thread</a> there are actually 3 different ways to power your Edison via the breakout board.</p>

<ul>
<li>5V via the USB connector</li>
<li>7-12V via J21</li>
<li>Single Cell LiPo battery via J2</li>
</ul>


<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/power_options.jpg"></h1>


<h2>Configuring Your Edison</h2>

<p>Once you&rsquo;ve decided on a power strategy for your Edison it&rsquo;s time to power it up and play with it. By default your Edison comes with <a href="https://www.yoctoproject.org/">Yocto Linux</a> installed but you&rsquo;ll need to configure it.</p>

<ol>
<li> Connect the Edison to your PC with the USB cable.</li>
<li> Apply power. The easiest way to do this is via the second USB port. I didn&rsquo;t have a free port on my PC so I used a USB battery pack and it worked great.</li>
<li> Launch Device Manager (Go to Start and search &ldquo;Device Manager&rdquo; if you can&rsquo;t find it)</li>
<li> In Device Manager expand the <strong>Ports</strong> section and find the entry named <em>USB Serial Port (COM&hellip;)</em>. In parenthesis is the COM port your Edison can talk on. On my machine it&rsquo;s COM4.
<img src="http://blog.microcasts.tv/images/edison/com_port.jpg"></li>
<li> Launch your terminal emulator. These instructions assume you&rsquo;re using PuTTY.</li>
<li> Set the following options for communication

<ul>
<li>Connection Type: <strong>Serial</strong></li>
<li>Serial Line: <strong>[The COM value you found in step 4]</strong></li>
<li>Speed: <strong>115200</strong></li>
</ul>


<p><img src="http://blog.microcasts.tv/images/edison/putty_config.jpg"></p></li>
<li> Click <strong>Open</strong>

<ul>
<li><strong>NOTE: You are now about to start experiencing a super annoying defect in the Edison UART. This is what the datasheet says:</strong></li>
</ul>


<p><em>When Edison goes into low power sleep, the UART internal FIFO and interface is powered down. Therefore, a two-wire UART (Rx/Tx) will lose the first received character whenever Edison is in sleep mode.</em></p>

<p><strong>Basically if you don&rsquo;t type anything for about 20 seconds or so the next time you press a key in the terminal it will wake up the Edison but not register your key. You&rsquo;ll have to hit it again. It&rsquo;s very annoying and I will post info on how to disable sleep mode as soon as I figure it out</strong></p></li>
<li> Wait for the blank terminal window to appear.</li>
<li> Hit <strong>Enter</strong> twice. You may have to hit it 3 times if you waited too long. Told you it was annoying.</li>
<li> At the login prompt type <strong>root</strong></li>
<li> At the next prompt type <strong>configure_edison</strong></li>
</ol>


<p>Follow the prompts through the configuration. If the Edison doesn&rsquo;t locate any WiFi networks at first just press <strong>0</strong> to have it rescan. Mine didn&rsquo;t find any the first time around for some reason.</p>

<h2>Start Poking Around</h2>

<p>Once you&rsquo;ve finished configuring your Edison you can essentially treat it like a Linux machine. I was surprised to find that it had NodeJS and NPM installed and was able to get an Express website up and running within a couple of minutes.</p>

<p>A few things of note:</p>

<ul>
<li>If you want to create/edit files the Edison comes with Vim which can be launched with <strong>vi</strong></li>
<li>To shut down the Edison use <strong>systemctl poweroff</strong></li>
<li>If you&rsquo;re coming from Raspberry Pi land most of the Linux commands you already know still apply</li>
</ul>


<p>If you have any problems or questions feel free to <a href="https://twitter.com/kevinsidwar">reach out on Twitter</a>. I&rsquo;m always happy to help if I can.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/edison/finger_edison.jpg" width="611" height="400"></h1>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cereal Box Pi Cases]]></title>
    <link href="http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases/"/>
    <updated>2014-09-24T09:32:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/24/cereal-box-pi-cases</id>
    <content type="html"><![CDATA[<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/cereal_cases.jpg" width="640" height="360"></h1>


<p>So last week I found a pic on Imgur posted by quantumCity showing a <a href="https://imgur.com/gallery/8RLUdNb">Raspberry Pi case made from a manila folder</a>. Needless to say I found it to be a pretty neat way to throw together a case from something lying around the house that didn&rsquo;t consist of using Legos. He posted the CAD file and a pdf version so all you have to do is print it, transfer it, cut it, and fold it. It worked like a charm on the first try.</p>

<!-- more -->


<p>The only problem was that I found it to be a little flimsy for my taste, not to mention kinda plain. So I had the idea to try using a cereal box which is made of a sturdier, yet still thin enough, material. I raided the pantry and pretty soon had Captain Crunch staring on the case of my Model B+ Pi. After that I was obsessed and spent the time to create printouts for the Model A and B and want to share them with the community.</p>

<h3>Sorry, No CAD Files</h3>

<p>I found the original .dwg file to be a huge pain as I wasn&rsquo;t able to easily modify it and my PC didn&rsquo;t want to install any of the open source programs capable of working with it. So I created my models in <a href="http://www.sketchup.com/">SketchUp</a> and have included those files as well as a to-scale PDF that you can just print and use for each.</p>

<ul>
<li> <a href="http://blog.microcasts.tv/assets/ModelA_case.skp">Model A Sketchup File</a></li>
<li> <a href="http://blog.microcasts.tv/assets/ModelA_case.pdf">Model A PDF</a></li>
<li> <a href="http://blog.microcasts.tv/assets/ModelB_case.skp">Model B Sketchup File</a></li>
<li> <a href="http://blog.microcasts.tv/assets/ModelB_case.pdf">Model B PDF</a></li>
</ul>


<p><strong>NOTE:</strong> If you try to print the PDF you need to make sure there is no scaling in the print settings like Fit to Page. Otherwise the dimensions won&rsquo;t be quite right.</p>

<h3>Get Creative</h3>

<p>There are so many things that could work as a medium here and I&rsquo;d love to see what people come up with. Feel free to modify the design too. You could cut out the back corner to allow access to the GPIO header or even cut some sweet vent designs if you&rsquo;re worried about overheating. If you make a case using one of the plans I would love it if you linked to a picture in the comments.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/puffs_case_small.png" width="600" height="600"></h1>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Kitchen Appliance Phase of Hardware]]></title>
    <link href="http://blog.microcasts.tv/2014/09/16/the-kitchen-appliance-phase-of-hardware/"/>
    <updated>2014-09-16T22:55:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/16/the-kitchen-appliance-phase-of-hardware</id>
    <content type="html"><![CDATA[<p>The Internet of Things is all the rage lately. It seems to be all that tech sites want to talk about and therefore what a ton of startups want to work on. I&rsquo;ve been watching this space closely for the last 5 years and I can&rsquo;t help but compare hardware, in it&rsquo;s current iteration, to being just like kitchen gadgets on the Home Shopping Network (link intentionally left off). What do I mean by that? Well, let&rsquo;s talk about apples for a minute.</p>

<!-- more -->


<p><img class="right" src="http://blog.microcasts.tv/images/fuji_money.jpg"></p>

<h2>Apple Tech</h2>

<p>Not the kind that comes with 64GB of flash or a digital crown. I&rsquo;m talking plain old apples here. The kind you grow in orchards. Did you know that you can easily spend over $50 on apple tech to help prepare a Fuji for consumption. $33 for the peeler, $10 for the corer and then another $10 for the slicer to create perfectly prepared apple portions. I&rsquo;m sure all of these things do their job extremely well. But after I clamp the peeler to my counter and include the time and energy it takes me to wash all of those things every time I want an apple am I really better off?  No. And that&rsquo;s why I still use my potato peeler and a sharp knife to prepare apples&hellip;just like my grandmother almost a century ago. And it&rsquo;s not just apples. There are slicers, mixers, special spoons and baking dishes. Thousands of things and if I bought every piece of kitchen tech out there I&rsquo;d need a semi truck to hold it all. And not a single one fundamentally changes how I eat apples.</p>

<h2>Hardware &ldquo;Kitchen&rdquo; Appliances</h2>

<p>By and large this is where hardware is stuck at the moment. We&rsquo;re in a massive movement of <strong>&ldquo;Build it Because We Can&rdquo;</strong>. The number of platforms that have come out in just the past 5 to 7 years has launched hardware to center stage. Normal people can do things with hardware in their basement that were either too hard or just too expensive 10 years ago. Do you have any idea how hard it was to create a <a href="http://www.raspberrypi.org/fresh-coffee-at-mailchimp/">WiFi enabled coffee pot</a> 10 years ago? Even 5 years ago? Now you can take your pick of platforms to help you do it in an evening for less than $100. <a href="http://raspberrypi.org">Raspberry Pi</a>, <a href="https://tessel.io/">Tessel</a>, <a href="https://www.spark.io/">SparkCore</a>, <a href="http://www.intel.com/content/www/us/en/do-it-yourself/edison.html">Edison</a>, <a href="http://arduino.cc/">Arduino</a> and <a href="http://postscapes.com/internet-of-things-hardware">dozens of other platforms</a> have made hardware development almost trivial in some cases. And with the good comes the questionable. Kickstarter after failed Kickstarter. IoT products that, while novel, don&rsquo;t fundamentally change our lives as their creators seem to think. Most are just another fancy apple peeler. I hate to pick on anyone but just a few examples.</p>

<h3>Cooler</h3>

<p><img src="http://blog.microcasts.tv/images/cooler_cooler.jpg" width="600" height="338"></p>

<br/>


<p>Most backed project on Kickstarter ever with over $13 million in pledges. It&rsquo;s a cooler with a blender, iphone doc and speakers. Oh, and obviously an LED and bottle opener.</p>

<h3>Bt.tn</h3>

<p><img src="http://blog.microcasts.tv/images/bttn_official_web.png" width="600" height="425"></p>

<br/>


<p>A $99 button that connects to the internet which can be programmed to perform a task when you press it.</p>

<h3>Blink(1)</h3>

<p><img src="http://blog.microcasts.tv/images/blink_1.jpg" width="600" height="363"></p>

<br/>


<p>A $35 programmable indicator light.</p>

<p>All of these are novel, maybe even cool, nice to have projects but are they really representative of &ldquo;What&rsquo;s Next&rdquo; for hardware and the already-started Internet of Things revolution? My historical vote is, no. At least I sure hope not.</p>

<h2>Hardware is the New Software</h2>

<p>I&rsquo;ve heard that phrase floating around the interwebs. &ldquo;Hardware is the new software.&rdquo; It&rsquo;s easy to say and I happen to agree actually but what does it mean? I think software has shown us the trajectory that hardware is going to follow. Software has been around since the 50s but if we look at mass adoption/creation in the &ldquo;hacker&rdquo; community it&rsquo;s really been around since the Mac and Windows came out. I&rsquo;m going to say the mid to late 80s. It was a great time of normal people doing amazing things that software had never done before because it was, you guessed it, either too hard or just too expensive a decade earlier. But just a short decade later the whole thing came crashing down. Only those pieces of software that fundamentally changed our lives made it through the event horizon known as the dot com bubble. The novelty wore off and we were left to realize that as humans we have an innate ability to filter noise out of our technical lives. And so it will go with hardware. The noise will all get filtered out. I think we&rsquo;re about 5 to 7 years in and the crash is coming. It&rsquo;s only after the implosion that the truly interesting and paradigm-shifting things will emerge and really take shape.</p>

<h2>So What Do We Do?</h2>

<p>Just let if flow. I don&rsquo;t know that there is a way to avoid the great hardware filter that&rsquo;s coming because I genuinely think that it&rsquo;s a necessary part of the evolutionary cycle of hardware. The Kitchen Appliance Phase of hardware, while annoying at times, isn&rsquo;t inherently bad. It&rsquo;s just a part of the journey that hardware has to go through. We have to get through this stage. Get it out of our system so we can move on to the really interesting things. The <a href="http://en.wikipedia.org/wiki/Dot-com_bubble">Dot-com Bubble</a> wasn&rsquo;t a complete waste. It didn&rsquo;t kill software. On the contrary, it forced it to the next level and that&rsquo;s exactly what hardware is waiting on.</p>

<p>I, for one, have never been more pumped. These are really exciting times and the future potential is seemingly unlimited. We’re learning things that we need to learn and pushing the movement forward. Just make sure you understand what’s coming and hopefully that will help you effectively navigate through it.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specs Aren't Everything]]></title>
    <link href="http://blog.microcasts.tv/2014/09/15/specs-arent-everything/"/>
    <updated>2014-09-15T15:18:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/09/15/specs-arent-everything</id>
    <content type="html"><![CDATA[<p>In the last week I&rsquo;ve seen several articles pop up comparing the new Intel Edison to the Raspberry Pi to the Arduino to the [enter some other development platform here]. The problem with every single one of these is that they are missing the boat when it comes to choosing a development platform for your next project.</p>

<h2>Specs Don&rsquo;t Matter&hellip;(Mostly)</h2>

<p>The easy thing to do when you want to create a new piece of tech content is just compare the specs of the different platforms. This table was part of a recent ReadWrite article.</p>

<h1 style="text-align:center"><a href="http://blog.microcasts.tv/images/compare_table.png"><img src="http://blog.microcasts.tv/images/compare_table.png" alt="Comparison Table"/></a></h1>


<br/>


<p>At a glance you can compare the CPU speed, memory and GPIO count. What it doesn&rsquo;t show, or even help with, is how to pick one for your next DIY project.</p>

<h2>What Really Matters</h2>

<p>So what really matters when picking a platform for your next project? Normally it has nothing to do with performance specs because almost any platform will be have plenty of performance to read your sensor and display the results or push it to the web. For me the most important questions aren&rsquo;t how much flash memory a platform has or what the input voltage is. It&rsquo;s a balancing act between a few key metrics.</p>

<h3>Battery or Plugged In?</h3>

<p>What do I mean by that? Well, first and foremost you need to ask yourself &ldquo;Is my project going to be battery powered or can it always be plugged in?&rdquo; Right away this is going to limit my choices. While I love the Raspberry Pi and know that it can be battery powered I&rsquo;m probably not going to choose it because it it such a power hog when compared to something like an Arduino Uno or Sparkcore.</p>

<h3>Compute Intensive? How Intense?</h3>

<p>After thining about the power constraints, the next thing I ask is what kind of compute power do I need. What I think most newcomers miss is that a massive share of beginner projects don&rsquo;t need an ARM processor running at 700MHz. But when you compare that to the 16MHz of the Arduino Uno you may think &ldquo;Well, that&rsquo;s not going to be powerful enough.&rdquo; Remember the Apollo missions that flew rockets into outerspace (whether you believe we landed on the moon or not&hellip;we did&hellip;it&rsquo;s certain that we did launch things into orbit)? The guidance computers on those spacecraft had approximately 64K, that&rsquo;s K not M or G, of memory and ran at an astonishingly fast, at the time, 2.048MHz. You can accomplish a LOT with very little in embedded systems.</p>

<h3>Untangibles</h3>

<p>The 3rd item I focus on is how much time I want to spend on the project. A lot of this relates to what language I can program in and what the community looks like for a certain platform. Is there a lot of shared code out there I can use or do I have to write it myself? The new Intel Edison may seem like a good fit for your project because of it&rsquo;s size and specs but the community is very young still so you probably can&rsquo;t count on a lot of examples to help you along if you get stuck. Maybe a spark core would be a better fit. This final category has a lot of sub categories. What if I just really want to develop in Javascript. Well then I have to look at something like a Tessel or Raspberry Pi.</p>

<p>Sometimes you may have conflicting requirements like a device that needs to be battery powered but outputs 1080p video to a built in monitor. Just remember that there are other factors that, in my opinion, are more important than base specs. After all, if your project only needs 3 I/O pins it doesn&rsquo;t really matter if your platform has 10, 30, or 50.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #18: Configure the Serial Port on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/08/08/configure-the-serial-port-on-the-raspberry-pi/"/>
    <updated>2014-08-08T22:08:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/08/08/configure-the-serial-port-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Did you even know the Raspberry Pi had a serial port? If you did and have tried to use it in Raspbian you&rsquo;ve probably run in to some weird behavior. That&rsquo;s because, by default, the serial port is tied up by the operating system so it can&rsquo;t be reliably used in your projects. In this episode I show you how to configure the serial port so it can be used to make your awesome ideas reality.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/bKHLTn_nXUM" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<h2>TL;DR</h2>

<p>All you have to do is modify two files to reclaim the serial port from Raspbian. The rest of this post shows you how.</p>

<h3>/etc/inittab</h3>

<p>Comment out the line near the very bottom that spawns a getty using the serial port.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Spawn a getty on Raspberry Pi serial line</span>
</span><span class='line'><span class="c">#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100  &lt;---- comment this line</span>
</span></code></pre></td></tr></table></div></figure>


<h3>/boot/cmdline.txt</h3>

<p>Be careful with this one as it contains the parameters sent to the kernel at startup. You need to remove any references to ttyAMA0,115200.</p>

<p>So you would change this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dwc_otg.lpm_enable<span class="o">=</span>0 <span class="nv">console</span><span class="o">=</span>ttyAMA0,115200 <span class="nv">kgdboc</span><span class="o">=</span>ttyAMA0,115200 <span class="nv">console</span><span class="o">=</span>tty1 <span class="nv">root</span><span class="o">=</span>/dev/mmcblk0p2 <span class="nv">rootfstype</span><span class="o">=</span>ext4 rootwait
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dwc_otg.lpm_enable<span class="o">=</span>0 <span class="nv">console</span><span class="o">=</span>tty1 <span class="nv">root</span><span class="o">=</span>/dev/mmcblk0p2 <span class="nv">rootfstype</span><span class="o">=</span>ext4 rootwait
</span></code></pre></td></tr></table></div></figure>


      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Physical Yo Button]]></title>
    <link href="http://blog.microcasts.tv/2014/06/25/a-physical-yo-button/"/>
    <updated>2014-06-25T15:03:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/25/a-physical-yo-button</id>
    <content type="html"><![CDATA[<p>I think we&rsquo;re all still trying to figure out what Yo&rsquo;s place is in the internet family but as of right now it&rsquo;s basically a viral app. As soon as I found out there was an API for it I just knew I had to attach some hardware to it. Here&rsquo;s a demo of what I put together.</p>

<p>The whole thing took me about 4 hours once I resolved my API issue (I originally gave them the wrong URL for the callback and had to email them to fix it). I want to share the process in case other people want to integrate Yo with hardware.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/yo_post.jpg" width="640" height="400"></h1>




<!-- more -->


<h2>Proof It Works</h2>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/9c45uJmmYs4" frameborder="0" allowfullscreen></iframe>


<h2>How It Works</h2>

<p>You send a Yo to UCASTS to subscribe &mdash;&ndash;> My live yo counter increments &mdash;&ndash;> Anytime I push the magic button all of my subscribers get a Yo!.</p>

<p>In terms of hardware you can customize this process to be very customizable.</p>

<ol>
<li> User subscribes to your Yo feed</li>
<li> A callback allows you to execute some action when someone subscribes</li>
<li> You now have the ability to easily send a Yo to all of your subscribers based on any trigger you can think of.</li>
</ol>


<h2>Understanding the API</h2>

<p>To sign up for the API just head over to <a href="http://yoapi.justyo.co/">http://yoapi.justyo.co/</a>. You&rsquo;ll be walked through a few simple steps to get things set up. If you want notifications when people subscribe you&rsquo;ll need to specify a callback url that the api can call. Once you&rsquo;ve finished filling out the form you&rsquo;ll have to wait for Yo to email you your api token. Mine took overnight but I didn&rsquo;t register until later in the afternoon.</p>

<p>Once you have your api token all you have to do to send a Yo to all of your subscribers is POST your api token to <strong>api.justyo.co/yoall/</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data “api_token<span class="o">=[</span>your_api_token<span class="o">]</span>” http://api.justyo.co/yoall/
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it.</p>

<h2>The Server</h2>

<p>So there are really two parts to this. We need a backend to handle the callback requests from the Yo api and a client running on the Pi to handle our hardware interaction. Let&rsquo;s start with the server. This is really quite simple. I created an <a href="http://expressjs.com">Express</a> website that I pushed to <a href="https://heroku.com">Heroku</a> and then pointed one of my domains to it. In <a href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/">&micro;Cast #17</a> I showed how to set up <a href="http://socket.io/download/">Socket.IO</a> with Express and that&rsquo;s all I did here with one change. Because the socket.io server reuses the regular express server I had to define a route in the <strong>www</strong> file which also meant I had to move the 404 and error handler there. Here&rsquo;s what I ended up with in <strong>www</strong>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">!</span><span class="err">/usr/bin/env node</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">)(</span><span class="s1">&#39;microcasts-tv&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// catch 404 and forward to error handler</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// error handlers</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// development error handler</span>
</span><span class='line'><span class="c1">// will print stacktrace</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// production error handler</span>
</span><span class='line'><span class="c1">// no stacktraces leaked to user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">error</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when a request to my callback url happens I simply emit a message to the client running on the Raspberry Pi.</p>

<h2>The Pi Client</h2>

<p>The client piece of this project was fairly simple given the fact that I already had a display and button wired up on a breadboard and connected to a Pi. The first piece to the client is listening for websocket messages from the server to detect new subscribers. That&rsquo;s as easy as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;socket.io-client&quot;</span><span class="p">)(</span><span class="s1">&#39;http://yo.microcasts.tv&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yoCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Connected to server&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// Increment the yo count and update display</span>
</span><span class='line'>    <span class="nx">yoCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">yoCount</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m using the <a href="https://www.npmjs.org/package/spi">spi</a> package to connect to <a href="https://www.sparkfun.com/products/11442">my display</a>. I don&rsquo;t store the count anywhere locally at this point. I just count the Yos I&rsquo;ve gotten since launching the program but it would be trivial to store that info and track your Yo total. Every time I get a new websocket message I just update the display.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">spi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SPI</span><span class="p">.</span><span class="nx">Spi</span><span class="p">(</span><span class="s1">&#39;/dev/spidev0.0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">spi</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearMsg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x76</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearRx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x00</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">clearMsg</span><span class="p">,</span> <span class="nx">clearRx</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final piece to the client is sending a Yo to all of my followers when I push a button. Since the API is so simple we can accomplish that with just 12 lines of code if we use <a href="https://www.npmjs.org/package/requestify">Requestify</a>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gpio18</span> <span class="o">=</span> <span class="nx">gpio</span><span class="p">.</span><span class="kr">export</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="p">{</span><span class="nx">direction</span><span class="o">:</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){}});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Listen for button presses</span>
</span><span class='line'><span class="nx">gpio18</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;You pressed the button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">requestify</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://api.justyo.co/yoall/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">api_token</span><span class="o">:</span> <span class="s2">&quot;[your token]&quot;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Yo sent to subscribers!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>My one regret with this project was that I didn&rsquo;t have one of these from Sparkfun on hand:</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/blue_dome_button.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>Image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>


<p>I create <a href="https://gist.github.com/sidwarkd/355de4e13f624825a838">a Gist that has the meat of the code</a> if you&rsquo;re interested.</p>

<p>Got any ideas on how to integrate hardware with the Yo API? I&rsquo;d love to here about it.</p>

<p><strong>If this article brought you any value at all I&rsquo;d really appreciate it if you would share it using the buttons below</strong></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #17: Control Hardware Remotely With Socket.IO]]></title>
    <link href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/"/>
    <updated>2014-06-21T00:13:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been paying attention to hardware lately you&rsquo;ve probably noticed how people have gone insane over remotely accessing their devices. In this &micro;Cast I&rsquo;ll show you a simple way to get your project setup so that you can talk to it and control it via the interwebs. The best part, it only takes about 20 minutes.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/z3O26CC9nAc" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<p>We&rsquo;ll pull together all kinds of awesomeness using</p>

<ul>
<li><a href="http://socket.io/download/">SocketIO</a></li>
<li><a href="http://nodejs.org">Node</a></li>
<li><a href="http://expressjs.com">Express</a></li>
<li><a href="https://heroku.com">Heroku</a> by using the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li>and more</li>
</ul>


<p>Credit to <a href="https://twitter.com/HugoGiraudel">Hugo Giraudel</a> for the <a href="http://tympanus.net/codrops/2012/09/13/button-switches-with-checkboxes-and-css3-fanciness/">awesome CSS styled checkbox</a>.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwest 2014 Presentation]]></title>
    <link href="http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation/"/>
    <updated>2014-06-02T23:06:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation</id>
    <content type="html"><![CDATA[<p>My presentation from the Openwest Conference has posted to YouTube.</p>

<div class="videoblob">
<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/fSqFgc-U_ZI" frameborder="0" allowfullscreen></iframe>
</div>


<p>Really appreciated the opportunity I had to present and loved meeting some new people. Looking forward to attending next year.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Python Library]]></title>
    <link href="http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library/"/>
    <updated>2014-05-16T00:15:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<p>I created a python module that makes interacting with specific hardware easy. You can find it here:
<a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<hr/>


<p>I&rsquo;ve found myself writing quite a bit of code lately to interface with different pieces of hardware on the Raspberry Pi. I finally realized that for every new project I was copying the same code from the previous project to do things like turn on an LED or read the state of a switch. I decided that it was time to take all of that work and put it into a library that I could easily reuse with each project.</p>

<h2>Simple Example</h2>

<p>The python and node modules I&rsquo;ve used to create projects in the past are very simple and generally easy to use. What they don&rsquo;t provide, and aren&rsquo;t meant to provide, is a higher level of abstraction around certain pieces of hardware. For example, let&rsquo;s look at the <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor</a>.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/tmp102.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>TMP102 image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>




<!-- more -->


<p>It&rsquo;s an I²C temperature sensor that will return a reading of the current temperature. But like any I²C module you need to know things like what registers to set and read to get that reading and how the reading is returned by the sensor. For this sensor the current reading is accessed via register 0x00 of the module and is returned as a 12-bit value which requires a two byte read. Then you have to know that the value you get back is an integer that needs to be multiplied by .0625 to get a reading in degrees Celsius. Here&rsquo;s what the code looks like.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smbus</span>
</span><span class='line'><span class="n">bus</span> <span class="o">=</span> <span class="n">smbus</span><span class="o">.</span><span class="n">SMBus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">bus</span><span class="o">.</span><span class="n">read_word_data</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">byte1_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b0000000011111111</span>
</span><span class='line'><span class="n">byte2_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1111111100000000</span>
</span><span class='line'><span class="n">byte1</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span> <span class="n">byte1_mask</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">byte2</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span> <span class="n">byte2_mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">=</span> <span class="n">byte2</span> <span class="o">|</span> <span class="n">byte1</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">*=</span> <span class="o">.</span><span class="mo">0625</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not overly complicated but it took some work and time reading through the datasheet. Now apply this to everything in your project; display, buttons, switches, etc.</p>

<h2>Gimme the Abstraction</h2>

<p>What I wanted was to drop a module into my project that had all of this code I previously figured out wrapped up nicely and ready to use. So here is how I get a temperature reading from the TMP102 with the ucasts Raspberry Pi python module.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">ucasts</span> <span class="kn">import</span> <span class="n">TMP102</span>
</span><span class='line'><span class="n">temp_sensor</span> <span class="o">=</span> <span class="n">TMP102</span><span class="p">()</span>
</span><span class='line'><span class="n">tempF</span> <span class="o">=</span> <span class="n">temp_sensor</span><span class="o">.</span><span class="n">get_temp_in_f</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The library handles the I²C bus and all other sensor-specific details. I&rsquo;ve added a handful of components already and intend to expand it as I experiment with more modules for &micro;Cast episodes. I&rsquo;ve tried to thoroughly document it so it&rsquo;s easy to pick up and use.</p>

<p><a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<p>If you do use the library I&rsquo;d love to hear about it and I&rsquo;m always happy to answer any questions.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #16: Pi + Express + Bootstrap + Angular FTW!]]></title>
    <link href="http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular/"/>
    <updated>2014-04-14T23:19:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]:</strong> I&rsquo;ve had requests to post the finished code on Github for those that want to just play with the completed app. It&rsquo;s now available at <a href="https://github.com/sidwarkd/pimonitor">https://github.com/sidwarkd/pimonitor</a>.</p>

<p>About a month ago I came across the <a href="http://lifehacker.com/command-pi-monitors-your-raspberry-pi-from-your-phone-1561340630">CommandPi</a> iOS app. It looked interesting so I paid the 99 cents and downloaded it to my iPad. The problem was, it didn&rsquo;t work. I would provide my SSH credentials and after logging in the program would crash. So like any curious developer, instead of waiting for a fix I set out to write my own.</p>

<p>To be fair to the creator of <a href="https://itunes.apple.com/us/app/command-pi/id830462681?mt=8">CommandPi</a>, what you are about to see is not meant to take anything away from that app. The app creator has put together a very nice UI and the crashing issue has been fixed. I just wanted to see how easy or hard it would be to create a knock off using <a href="http://expressjs.com/">ExpressJS</a>, <a href="http://angularjs.org/">Angular</a> and <a href="http://getbootstrap.com/">Bootstrap</a>.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/zprWNhB0NeU" frameborder="0" allowfullscreen></iframe>




<!-- more -->




<br/>


<br/>


<p>In <a href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/">µCast #14</a> and <a href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/">µCast #15</a> we created the plumbing necessary to grab most of the information necessary to create our app. We also expose the <a href="http://blog.microcasts.tv/2013/10/25/query-temperature-on-raspberry-pi/">temperature reading given by the Pi</a>. This episode was shot in a single take (with light editing for time) showing how to pull various technologies together to create a web application for monitoring our Raspberry Pi.</p>

<p>This is the pinode_stats.gist used in the video.</p>

<div><script src='https://gist.github.com/sidwarkd/10226198.js?file=pinode_stats.js'></script>
<noscript><pre><code>'use strict'

// An example of accessing system information on the Raspberry Pi with NodeJS

var fs = require('fs');

var PiStats = function(){
  var stats = {};
  var _currentCPUInfo = {total:0, active:0};
  var _previousCPUInfo = {total:0, active:0};

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      stats.memTotal = Math.floor(getValFromLine(lines[0]) / 1024);
      stats.memFree = Math.floor(getValFromLine(lines[1]) / 1024);
      stats.memCached = Math.floor(getValFromLine(lines[3]) / 1024);
      stats.memUsed = stats.memTotal - stats.memFree;
      stats.memPercentUsed = Math.ceil(((stats.memUsed - stats.memCached) / stats.memTotal) * 100);

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    _previousCPUInfo.active = _currentCPUInfo.active;
    _previousCPUInfo.idle = _currentCPUInfo.idle;
    _previousCPUInfo.total = _currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      _currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      _currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        _currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      _currentCPUInfo.active = _currentCPUInfo.total - _currentCPUInfo.idle
      _currentCPUInfo.percentUsed = calculateCPUPercentage(_previousCPUInfo, _currentCPUInfo);

      stats.cpuUsage = _currentCPUInfo.percentUsed;

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var getCurrentTemperature = function(cb){
    // Uncomment the next 3 lines for testing on regular linux and comment
    // out the fs.readFile block
    //stats.tempC = 42.3;
    //stats.tempF = 102.5;
    //cb(null, stats);
    fs.readFile('/sys/class/thermal/thermal_zone0/temp', 'utf8', function(err, data){
      var temp = data.match(/[0-9]+/gi);
      stats.tempC = parseInt(temp[0]) / 1000;
      stats.tempF = stats.tempC * 1.80 + 32.00;

      if(cb !== undefined)
        cb(null, stats);
    });
  }

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    update: function(cb){
      getMemoryInfo(function(err, data){
        getCPUInfo(function(err1, data1){
          getCurrentTemperature(function(err2, data2){
            cb(err2, data2);
          });
        });
      });
    },
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
        return;
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

module.exports = PiStats;

// Example usage

// var stats = require('./pinode_stats.js');
// stats.update(function(err, data){
//   console.log(data);
// });

</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Hacking Cheat Sheet]]></title>
    <link href="http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet/"/>
    <updated>2014-04-02T23:29:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet</id>
    <content type="html"><![CDATA[<h1 style="text-align:center"><a href="http://blog.microcasts.tv/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf"><img src="http://blog.microcasts.tv/images/cheat_sheet_img.jpg" alt="Cheat Sheet Image"/></a></h1>


<p>As part of my Skillshare class <a href="http://www.skillshare.com/classes/technology/Unleash-The-Raspberry-Pi-Through-Physical-Computing/2109089069">Unleash The Raspberry Pi Through Physical Computing</a> I created a cheat sheet that I reference when working on hardware projects involving the Pi.</p>

<p>You may find it useful when working on your own projects so feel free to download and share. Let me know if you think I&rsquo;m missing something important. I&rsquo;m working on an HTML version and will update this post when it&rsquo;s ready.</p>

<p><a href="http://blog.microcasts.tv/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf">Rasperry Pi Hacker&rsquo;s Cheat Sheet</a></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #15: CPU Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-20T22:41:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this µCast we cover the very basics of CPU usage on the Raspberry Pi and show you how to figure out how hard your ARM processor is working in realtime.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/DqGVTUsMuFI" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code contain the memory examples from µCast #14 as well as the CPU usage code in Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>


<h3>Python Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #14: Memory Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-15T23:37:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this &micro;Cast we cover the very basics of RAM usage on the Raspberry Pi and show you how to figure out how much memory your Pi is using at any given time and how to get some of it back.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/EqyVlTP4R5M" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code are just quick examples of how you can query memory information using Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>


<h3>Python Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&micro;Tip: Fixing Tight Breadboards]]></title>
    <link href="http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards/"/>
    <updated>2014-03-12T23:33:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards</id>
    <content type="html"><![CDATA[<p>Have you ever bought a breadboard that had extremely tight connection terminals? The kind that you can&rsquo;t connect anything to because everything just bends. I get that breadboards need to securely hold things but not being able to easily insert a resistor or capacitor is just ridiculous.</p>

<p>My suggestion is the find a breadboard the is as smooth as butter to connect to and never stray from it. Surprisingly enough, I find Radio Shack breadboards to have very nice connection terminals that require no break-in.</p>

<h3>How to Fix It</h3>

<p>If you do have a breadboard that has overly tight terminals there is an easy way to fix it although it does take a little time. Simply grab a pair of pliers and a length of male header (4 to 5 pins long). Grab the short side of the header pins firmly with the pliers and then push the header pins into the terminals. With a length of 5 pins you can handle an entire vertical row at a time. That&rsquo;s all there is to it. After doing this your components should slide easily and securely into your breadboard. Here&rsquo;s a vine showing the process.</p>

<iframe class='vine-embed' src='https://vine.co/v/MmxpprQ1Wlg/embed/simple' width='600' height='600' frameborder='0'></iframe>


<script async src='http://blog.microcasts.tv//platform.vine.co/static/scripts/embed.js' charset='utf-8'></script>


      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspi-Plotly With TMP102 Sensor]]></title>
    <link href="http://blog.microcasts.tv/2014/03/01/raspi-plotly-with-tmp102-sensor/"/>
    <updated>2014-03-01T23:40:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/03/01/raspi-plotly-with-tmp102-sensor</id>
    <content type="html"><![CDATA[<p>I recently came across an instructable about <a href="http://www.instructables.com/id/Streaming-Data-Visualization-Plotly-Raspberry-Pi/?ALLSTEPS">streaming temperature data to plot.ly</a>. I wanted to go through their example setup but didn&rsquo;t have the same kind of temperature sensor. So I created a screencast showing how I modified their source code to use the streaming service with my <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor from Sparkfun</a>.</p>

<p>My modified code can be found <a href="https://gist.github.com/sidwarkd/9614055">as a gist on github</a></p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/IIcM1nR-omg" frameborder="0" allowfullscreen></iframe>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking Olympic Medals with the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/02/20/tracking-olympic-medals-with-the-raspberry-pi/"/>
    <updated>2014-02-20T00:07:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/20/tracking-olympic-medals-with-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure why I waited so long to do this now that the Olympics are coming to an end. The thought came to me today, &ldquo;I wonder how long it would take me to hack together a script to track and display medal counts.&rdquo; Well, I had to find out and below is the result. <strong>Disclaimer:</strong> I was not going for neat, well-organized code here.  I was going for speed so please be gentle.</p>

<h2>The Platform</h2>

<p>I cheated a little bit in that I already had the Pi configured and some hardware ready to go from my <a href="http://www.skillshare.com/classes/technology/Unleash-The-Raspberry-Pi-Through-Physical-Computing/2109089069/">Skillshare Class</a> (which is now free if you want to check it out) so I figured I&rsquo;d just use what I already had. The project from the Skillshare class includes an LED, temperature sensor, and other things but all I really needed for this project was the <a href="https://www.sparkfun.com/products/11442">seven segment display from Sparkfun</a>. I was ready to immediately start coding in Python.</p>

<h2>The Data Feed</h2>

<p>My first step was to find a suitable data source for the medal count. It really came down to two sources and how easily it would be to parse the data.  The first was <a href="http://www.nbcolympics.com/medals">NBC</a> and the second was the official <a href="http://www.sochi2014.com/en/medal-standings">Sochi Olympics site</a>. I liked the official site a little better because the html for the medals had specific css classes that would make extracting the data very straighforward. The problem I ran into though was when I ran my initial version of the script I got a <strong>Forbidden</strong> response.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/sochi_forbidden.jpg" title="Forbidden Response" alt="Forbidden Response"></h1>


<p>I assume this has something to do with the Agent header and them trying to prevent people like me from mooching off their site. Well played sochi.ru, well played.  Fortunately for us the good folks at NBC do not have the same concern so that&rsquo;s where I ended up getting the data.  Here is what part of the page looks like and has a url of <a href="http://www.nbcolympics.com/medals">http://www.nbcolympics.com/medals</a>.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/medal_count_display.jpg" title="Medal Count Display" alt="Medal Count Display"></h1>


<p>So how do we fetch just the medal counts that we want to display?  Well, in Chrome all we have to do is right-click on the text &ldquo;United States of America&rdquo; and do <strong>Inspect Element</strong> to expose the page HTML which looks like this.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/medal_count_html.jpg" title="Medal Count HTML" alt="Medal Count HTML"></h1>


<p>This was my first time parsing HTML in Python so there are probably much better ways to do this. If so please tell me about it in the comments so I can learn something new. I chose to use some simple XPATH to locate the anchor element with the country name and then navigate to the neighboring elements with the medal counts in them.  The result was this.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="n">page</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&quot;http://www.nbcolympics.com/medals&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="n">lxml</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//a[text()=&quot; United States of America&quot;]/@href&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">nameNode</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">getparent</span><span class="p">()</span><span class="o">.</span><span class="n">getparent</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">goldNode</span> <span class="o">=</span> <span class="n">nameNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span><span class='line'>  <span class="n">silverNode</span> <span class="o">=</span> <span class="n">goldNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span><span class='line'>  <span class="n">bronzeNode</span> <span class="o">=</span> <span class="n">silverNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting the actual integer value of the medal counts was then trivial. Remember, parsing out of the HTML will give you the values in strings.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="n">gold_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">goldNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>  <span class="n">silver_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">silverNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>  <span class="n">bronze_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">bronzeNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Displaying the Data</h2>

<p>With the data in hand it was just a matter of getting it onto the 7 segment display. In my Skillshare class I show how to configure and use SPI on the Pi to display stuff on a simple seven segment display so I already had all of the code for that. I just needed to format the display string appropriately. As my real estate was limited I decided to just use simple strings like &ldquo;to:23&rdquo; for the total count, &ldquo;go:14&rdquo; for gold, etc. I display each count 3 times and then query NBC again for an updated count. The interval could be much greater I suppose as medals don&rsquo;t change every 10 seconds.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="k">def</span> <span class="nf">display_medal_counts</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">gold</span><span class="p">,</span> <span class="n">silver</span><span class="p">,</span> <span class="n">bronze</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">gold</span> <span class="o">+</span> <span class="n">silver</span> <span class="o">+</span> <span class="n">bronze</span>
</span><span class='line'>    <span class="n">totalstr</span> <span class="o">=</span> <span class="s">&quot;to&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>    <span class="n">goldstr</span> <span class="o">=</span> <span class="s">&quot;go&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">gold</span><span class="p">)</span>
</span><span class='line'>    <span class="n">silverstr</span> <span class="o">=</span> <span class="s">&quot;si&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">silver</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bronzestr</span> <span class="o">=</span> <span class="s">&quot;br&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">bronze</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">totalstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">goldstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">silverstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">bronzestr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrap Up</h2>

<p>Throwing this together took me a little over an hour, much of which was spent learning how to parse HTML in Python. Here&rsquo;s a Vine to show it working. Not sure why the &lsquo;G&rsquo; doesn&rsquo;t use the middle hyphen segment.</p>

<iframe class="vine-embed" src="https://vine.co/v/MZTDJTxIKBp/embed/simple" width="480" height="480" frameborder="0"></iframe>


<script async src="http://blog.microcasts.tv//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<br/>


<br/>


<p>It&rsquo;s a great example of how the Raspberry Pi is great for rapid prototyping of an idea. The full code can be found <a href="https://gist.github.com/sidwarkd/9108668">in this gist</a>.</p>

<p>What Olympic-themed hardware projects can you think of?</p>

      
      <p><a href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=1968192" rel="tag" style="display:none">CodeProject</a></p>
      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salvaging a $100 USB Microphone]]></title>
    <link href="http://blog.microcasts.tv/2014/02/06/salvaging-a-00-usb-microphone/"/>
    <updated>2014-02-06T21:47:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/06/salvaging-a-00-usb-microphone</id>
    <content type="html"><![CDATA[<h2>Back Story</h2>

<p>A while back a good friend of mine gave me a <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?ie=UTF8&amp;qid=1391757018&amp;sr=8-1&amp;keywords=blue+microphone+yeti">Blue Yeti microphone</a> from work that he said they were going to throw away because the mini USB port had ripped out of it. I told him I&rsquo;d take it and see if I could fix it. It seemed like the only thing wrong with it was that the connector had literally been ripped out of the case. How they were able to accomplish that I don&rsquo;t know. So I did what any self-respecting DIYer would do: I called Blue and asked if they could give me the part number for the USB connector.</p>

<blockquote><p>&#8220;I&#8217;m sorry, I can&#8217;t give you that information. It&#8217;s proprietary&#8221;</p></blockquote>


<p>Really? A standard mini USB connector is proprietary? Give me a break Blue. So I did what any self-respecting Twitter user would do.</p>

<p> <blockquote class="twitter-tweet" lang="en"><p>Wow <a href="https://twitter.com/BlueMicrophones">@BlueMicrophones</a> won&#39;t give me the mini usb part number so I can fix a busted mic someone trashed. Not very <a href="https://twitter.com/search?q=%23DIY&amp;src=hash">#DIY</a> friendly. <a href="https://twitter.com/search?q=%23servicefail&amp;src=hash">#servicefail</a></p>&mdash; Kevin Sidwar (@KevinSidwar) <a href="https://twitter.com/KevinSidwar/statuses/336590188488826880">May 20, 2013</a></blockquote></p>

<script async src="http://blog.microcasts.tv//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>The Repair</h2>

<p>Having vented my rage on Twitter I logged on to <a href="http://www.mouser.com/Connectors/USB-Connectors/_/N-88hmf/">Mouser</a> to find a suitable replacement. I found one that I thought would work but never got around to ordering it. Fast forward almost a year and I decide I want to try to fix it but don&rsquo;t want to find the part again and wait for it to ship so I figured I might be able to just hack up a USB cable and solder it directly to the PCB where the connector ripped out. Here&rsquo;s how it looked when I took it apart.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/broken_mini_usb.jpg" title="Broken Mini USB Connector" alt="Broken Mini USB Connector"></h1>


<p>Again, how they managed to do this is beyond me. But it came off fairly clean so all I needed to do was remove the legs from the connector and solder in leads from a USB cable I cut. But which wires go to which holes? Well, if you take a closer look at the back side of the PCB you can get a pretty decent idea of which connections are which. We know that USB uses 4 connections: Supply, Ground, D+, and D-.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/usb_connections.jpg" title="Closeup of UBS connection traces" alt="Closeup of UBS connection traces"></h1>


<p>From this image we can guess that the thicker traces are the power lines and the thinner ones are the USB data lines. One of the connection holes isn&rsquo;t connected to anything. So figuring out which power line is ground was easy. Just set the meter to continuity mode, connect one probe to a known ground point (like an internal metal mount) and then see which of the thick traces gives you the continuity beep. That coupled with this diagram I found for a similar USB connector allowed me to identify D+ and D-.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/usb_connector_pinout.jpg" title="Pinout connections" alt="Pinout connections"></h1>


<h2>Soldering</h2>

<p>The solder work on this job was a little challenging for me. I quickly gave up on trying to solder the USB cable directly to the connector holes as the tiny wires were hard to handle. Instead I soldered some 22AWG leads from the connector holes that could exit the mic case through the mini USB opening and then I soldered the USB cable wires to those leads. Here are some shots of that.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/leads_soldered.jpg" title="Leads soldered on" alt="Leads soldered on"></h1>




<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/leads_usb_opening.jpg" title="Leads coming out of case" alt="Leads coming out of case"></h1>


<p>I made sure all of the USB wires were isolated from each other using shrink wrap and then finished the whole job up with a big piece of shrink wrap over everything to leave a nice clean look. When I plugged it in it worked first time.</p>

<h2>Moral</h2>

<p>With just a little knowledge and some soldering skills there are lots of things that can be reclaimed from the junk pile.</p>

<p>In closing I&rsquo;d like to thank corporate america for having so much money that they just trash $100 mics because connectors break off. More importantly though I&rsquo;d like to send a big &ldquo;Suck It&rdquo; to Blue for hating on the DIY fix-it community. It&rsquo;s just a mini USB connector. I didn&rsquo;t need company secrets to fix it.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/repaired_mic.jpg" title="Repaired Mic" alt="Repaired Mic"></h1>


<p>P.S. Blue, if you had simply given me the part number I would have sung your praises on social networks and to anybody in the tech space that would listen. I also would have gone to you first as soon as I needed a new mic. Instead I&rsquo;ll never recommend your microphones to anybody and will personally never pay you a cent for one.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Skillshare Class Available]]></title>
    <link href="http://blog.microcasts.tv/2014/02/04/raspberry-pi-skillshare-class/"/>
    <updated>2014-02-04T21:16:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/04/raspberry-pi-skillshare-class</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]:</strong> After a lot of thought I&rsquo;ve decided to release the class for free.  You can still use the link below but the cost is now $0. I would greatly appreciate any feedback on the course because I want it to be as useful as possible.</p>

<p>My class <a href="http://skl.sh/1cTcEbF">Unleash The Raspberry Pi Through Physical Computing</a> is now available on Skillshare. The class covers the 3 main hardware capabilities exposed by the GPIO header on the Pi:</p>

<ul>
<li> Digital I/O</li>
<li> SPI</li>
<li> I2C</li>
</ul>


<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/completed_clean_light_angle.jpg" alt="Simple Home Monitor with Raspberry Pi"/></h1>


<p>In addition to covering each of these topics I also show you how to get your Raspberry Pi connected to Twitter. It&rsquo;s the first class on Skillshare to cover the Raspberry Pi and contains just <strong>over 3 hours of video instruction</strong>. It&rsquo;s packed with tips and tricks for creating your own hardware projects and students that enroll get access to a cheat sheet I&rsquo;ve put together for creating hardware projects with the Raspberry Pi. If you&rsquo;d like to enroll use the link at the top of this post to <strong>get 50% off</strong> and get the class for only $12.50 USD.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Python Scripts from Dropbox on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi/"/>
    <updated>2014-01-27T22:59:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever tried writing code on your Raspberry Pi from just the plain terminal window then you&rsquo;ve probably used Nano or Vim. If you&rsquo;re like me you wished you could have used your favorite IDE or text editor on another machine. When I develop for the Raspberry Pi my normal use case is to SSH in and write code via Nano. While this works just fine I&rsquo;d prefer to have the bigger real estate afforded by my desktop monitors.</p>

<h3>What is <code>preheat</code></h3>

<p><code>preheat</code> is my solution to this problem. It allows me to pull scripts down from my Dropbox account at execution time. When I finally decided I didn&rsquo;t want to code directly on the Pi anymore the very first thing that came to my mind was to install <a href="http://dropbox.com">Dropbox</a> on the Pi and just have it sync with a folder on my dev machine. It only took a few searches to realize that a Dropbox client for the Pi doesn&rsquo;t exist. So I found a few other solutions like <a href="http://en.wikipedia.org/wiki/Rsync">rsync</a>, <a href="http://owncloud.org">ownCloud</a> and others but everything I found was either too much work or just plain overkill for what I needed. So <code>preheat</code> was born.</p>

<p>It&rsquo;s a simple Python script that will query your Dropbox account for the file you want to run and pull it down. So normally I&rsquo;d use the following to run a script I&rsquo;m working on:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python myscript.py
</span></code></pre></td></tr></table></div></figure>


<p>With <code>preheat</code> I would run it like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python preheat myscript.py
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t need to have <strong>myscript.py</strong> on the Raspberry Pi. It&rsquo;s on my desktop machine in a dropbox folder being updated every time I change it. When I run it via <code>preheat</code> it will scan my Dropbox account, find it, and pull it down for me.</p>

<p>If you&rsquo;d like to see how it works <a href="https://github.com/sidwarkd/preheat">check out the source code on Github</a></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eagle How-To: Export Board Image]]></title>
    <link href="http://blog.microcasts.tv/2013/11/03/eagle-how-to-export-board-image/"/>
    <updated>2013-11-03T00:30:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/11/03/eagle-how-to-export-board-image</id>
    <content type="html"><![CDATA[<p>Sometimes when you&rsquo;re working on a board design you don&rsquo;t want to wait to get a prototype board from a fab house. For simple or one off boards you can just make them at home. In order to do that we need a way to get our board design out of Eagle and onto a PCB. Most home-etch processes I&rsquo;ve seen require, in some form, a to-scale printout of the board. Personally I use the <a href="http://www.pcbfx.com/">Pulsar PCB products</a> which I&rsquo;ve found to work very well. The following is my process for getting the board design printed out.</p>

<ol>
<li>  Launch Eagle and open the board view of your project.</li>
<li>  Turn the grid off via the <strong>View->Grid</strong> menu or using the command: &ldquo;grid off&rdquo;</li>
<li>  Turn off all layers except the the ones that you want to print. I like to see layers 1, 17, 18 and 20. That&rsquo;s top, pads, vias and dimension. If your board is two sided you only want to print one side at a time.</li>
<li>  If the background is black we need to make it white. Do this via the <strong>Options->User Interface</strong> dialog or use the command: &ldquo;set palette white;window;&rdquo;.</li>
<li>  File->Export->Image</li>
<li>  Select a destination file. I prefer to use the .png format.</li>
<li>  Check the <strong>Monochrome</strong> checkbox</li>
<li>  Change the resolution to a multiple of your screen dpi. The default screen resolution in Windows is 96 dpi so I normally use 384 which is 96 x 4.</li>
<li>  Click <strong>Ok</strong> to export the image.</li>
</ol>


<p>  You now have an image file of your board that should scale perfectly to size. I normally just drag it into a document in OpenOffice Writer. If it goes into your document full size you just need to scale it to 25% of original size and it will be perfectly to-scale.</p>

      ]]>

    </content>
  </entry>
  
</feed>
