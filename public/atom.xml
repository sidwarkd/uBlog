<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The &micro;Blog
]]></title>
  <link href="http://blog.microcasts.tv/atom.xml" rel="self"/>
  <link href="http://blog.microcasts.tv/"/>
  <updated>2014-06-26T10:35:13-06:00</updated>
  <id>http://blog.microcasts.tv/</id>
  <author>
    <name><![CDATA[K-SID]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Physical Yo Button]]></title>
    <link href="http://blog.microcasts.tv/2014/06/25/a-physical-yo-button/"/>
    <updated>2014-06-25T15:03:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/25/a-physical-yo-button</id>
    <content type="html"><![CDATA[<p>I think we&rsquo;re all still trying to figure out what Yo&rsquo;s place is in the internet family but as of right now it&rsquo;s basically a viral app. As soon as I found out there was an API for it I just knew I had to attach some hardware to it. Here&rsquo;s a demo of what I put together.</p>

<p>The whole thing took me about 4 hours once I resolved my API issue (I originally gave them the wrong URL for the callback and had to email them to fix it). I want to share the process in case other people want to integrate Yo with hardware.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/yo_post.jpg" width="640" height="400"></h1>




<!-- more -->


<h2>Proof It Works</h2>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/9c45uJmmYs4" frameborder="0" allowfullscreen></iframe>


<h2>How It Works</h2>

<p>You send a Yo to UCASTS to subscribe &mdash;&ndash;> My live yo counter increments &mdash;&ndash;> Anytime I push the magic button all of my subscribers get a Yo!.</p>

<p>In terms of hardware you can customize this process to be very customizable.</p>

<ol>
<li> User subscribes to your Yo feed</li>
<li> A callback allows you to execute some action when someone subscribes</li>
<li> You now have the ability to easily send a Yo to all of your subscribers based on any trigger you can think of.</li>
</ol>


<h2>Understanding the API</h2>

<p>To sign up for the API just head over to <a href="http://yoapi.justyo.co/">http://yoapi.justyo.co/</a>. You&rsquo;ll be walked through a few simple steps to get things set up. If you want notifications when people subscribe you&rsquo;ll need to specify a callback url that the api can call. Once you&rsquo;ve finished filling out the form you&rsquo;ll have to wait for Yo to email you your api token. Mine took overnight but I didn&rsquo;t register until later in the afternoon.</p>

<p>Once you have your api token all you have to do to send a Yo to all of your subscribers is POST your api token to <strong>api.justyo.co/yoall/</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data “api_token<span class="o">=[</span>your_api_token<span class="o">]</span>” http://api.justyo.co/yoall/
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it.</p>

<h2>The Server</h2>

<p>So there are really two parts to this. We need a backend to handle the callback requests from the Yo api and a client running on the Pi to handle our hardware interaction. Let&rsquo;s start with the server. This is really quite simple. I created an <a href="http://expressjs.com">Express</a> website that I pushed to <a href="https://heroku.com">Heroku</a> and then pointed one of my domains to it. In <a href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/">&micro;Cast #17</a> I showed how to set up <a href="http://socket.io/download/">Socket.IO</a> with Express and that&rsquo;s all I did here with one change. Because the socket.io server reuses the regular express server I had to define a route in the <strong>www</strong> file which also meant I had to move the 404 and error handler there. Here&rsquo;s what I ended up with in <strong>www</strong>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">!</span><span class="err">/usr/bin/env node</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">)(</span><span class="s1">&#39;microcasts-tv&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// catch 404 and forward to error handler</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// error handlers</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// development error handler</span>
</span><span class='line'><span class="c1">// will print stacktrace</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// production error handler</span>
</span><span class='line'><span class="c1">// no stacktraces leaked to user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">error</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when a request to my callback url happens I simply emit a message to the client running on the Raspberry Pi.</p>

<h2>The Pi Client</h2>

<p>The client piece of this project was fairly simple given the fact that I already had a display and button wired up on a breadboard and connected to a Pi. The first piece to the client is listening for websocket messages from the server to detect new subscribers. That&rsquo;s as easy as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;socket.io-client&quot;</span><span class="p">)(</span><span class="s1">&#39;http://yo.microcasts.tv&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yoCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Connected to server&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;yoReceived&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// Increment the yo count and update display</span>
</span><span class='line'>    <span class="nx">yoCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">yoCount</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m using the <a href="https://www.npmjs.org/package/spi">spi</a> package to connect to <a href="https://www.sparkfun.com/products/11442">my display</a>. I don&rsquo;t store the count anywhere locally at this point. I just count the Yos I&rsquo;ve gotten since launching the program but it would be trivial to store that info and track your Yo total. Every time I get a new websocket message I just update the display.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">spi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SPI</span><span class="p">.</span><span class="nx">Spi</span><span class="p">(</span><span class="s1">&#39;/dev/spidev0.0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">spi</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateDisplay</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearMsg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x76</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">clearRx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mh">0x00</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">clearMsg</span><span class="p">,</span> <span class="nx">clearRx</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'>  <span class="nx">spi</span><span class="p">.</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="nx">buf</span><span class="p">){});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final piece to the client is sending a Yo to all of my followers when I push a button. Since the API is so simple we can accomplish that with just 12 lines of code if we use <a href="https://www.npmjs.org/package/requestify">Requestify</a>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gpio18</span> <span class="o">=</span> <span class="nx">gpio</span><span class="p">.</span><span class="kr">export</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="p">{</span><span class="nx">direction</span><span class="o">:</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){}});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Listen for button presses</span>
</span><span class='line'><span class="nx">gpio18</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;You pressed the button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">requestify</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://api.justyo.co/yoall/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">api_token</span><span class="o">:</span> <span class="s2">&quot;1fa9ba862f5887e3637bc71267560701&quot;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Yo sent to subscribers!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>My one regret with this project was that I didn&rsquo;t have one of these from Sparkfun on hand:</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/blue_dome_button.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>Image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>


<p>I create <a href="https://gist.github.com/sidwarkd/355de4e13f624825a838">a Gist that has the meat of the code</a> if you&rsquo;re interested.</p>

<p>Got any ideas on how to integrate hardware with the Yo API? I&rsquo;d love to here about it.</p>

<p><strong>If this article brought you any value at all I&rsquo;d really appreciate it if you would share it using the buttons below</strong></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #17: Control Hardware Remotely With Socket.IO]]></title>
    <link href="http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely/"/>
    <updated>2014-06-21T00:13:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/21/using-socket-io-to-control-the-raspberry-pi-remotely</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been paying attention to hardware lately you&rsquo;ve probably noticed how people have gone insane over remotely accessing their devices. In this &micro;Cast I&rsquo;ll show you a simple way to get your project setup so that you can talk to it and control it via the interwebs. The best part, it only takes about 20 minutes.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/z3O26CC9nAc" frameborder="0" allowfullscreen></iframe>


<!-- more -->


<p>We&rsquo;ll pull together all kinds of awesomeness using</p>

<ul>
<li><a href="http://socket.io/download/">SocketIO</a></li>
<li><a href="http://nodejs.org">Node</a></li>
<li><a href="http://expressjs.com">Express</a></li>
<li><a href="https://heroku.com">Heroku</a> by using the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li>and more</li>
</ul>


<p>Credit to <a href="https://twitter.com/HugoGiraudel">Hugo Giraudel</a> for the <a href="http://tympanus.net/codrops/2012/09/13/button-switches-with-checkboxes-and-css3-fanciness/">awesome CSS styled checkbox</a>.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwest 2014 Presentation]]></title>
    <link href="http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation/"/>
    <updated>2014-06-02T23:06:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/06/02/openwest-2014-presentation</id>
    <content type="html"><![CDATA[<p>My presentation from the Openwest Conference has posted to YouTube.</p>

<div class="videoblob">
<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/fSqFgc-U_ZI" frameborder="0" allowfullscreen></iframe>
</div>


<p>Really appreciated the opportunity I had to present and loved meeting some new people. Looking forward to attending next year.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Python Library]]></title>
    <link href="http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library/"/>
    <updated>2014-05-16T00:15:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/05/16/raspberry-pi-python-library</id>
    <content type="html"><![CDATA[<h3>TLDR</h3>

<p>I created a python module that makes interacting with specific hardware easy. You can find it here:
<a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<hr/>


<p>I&rsquo;ve found myself writing quite a bit of code lately to interface with different pieces of hardware on the Raspberry Pi. I finally realized that for every new project I was copying the same code from the previous project to do things like turn on an LED or read the state of a switch. I decided that it was time to take all of that work and put it into a library that I could easily reuse with each project.</p>

<h2>Simple Example</h2>

<p>The python and node modules I&rsquo;ve used to create projects in the past are very simple and generally easy to use. What they don&rsquo;t provide, and aren&rsquo;t meant to provide, is a higher level of abstraction around certain pieces of hardware. For example, let&rsquo;s look at the <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor</a>.</p>

<h1 style="text-align:center;"><img src="http://blog.microcasts.tv/images/tmp102.jpg" width="300" height="300"></h1>


<p style="text-align:center;"><small><em>TMP102 image provided by Sparkfun as <a style="color:red;" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a></em></small></p>




<!-- more -->


<p>It&rsquo;s an I²C temperature sensor that will return a reading of the current temperature. But like any I²C module you need to know things like what registers to set and read to get that reading and how the reading is returned by the sensor. For this sensor the current reading is accessed via register 0x00 of the module and is returned as a 12-bit value which requires a two byte read. Then you have to know that the value you get back is an integer that needs to be multiplied by .0625 to get a reading in degrees Celsius. Here&rsquo;s what the code looks like.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smbus</span>
</span><span class='line'><span class="n">bus</span> <span class="o">=</span> <span class="n">smbus</span><span class="o">.</span><span class="n">SMBus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">bus</span><span class="o">.</span><span class="n">read_word_data</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">byte1_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b0000000011111111</span>
</span><span class='line'><span class="n">byte2_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1111111100000000</span>
</span><span class='line'><span class="n">byte1</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span> <span class="n">byte1_mask</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">byte2</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&amp;</span> <span class="n">byte2_mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">=</span> <span class="n">byte2</span> <span class="o">|</span> <span class="n">byte1</span>
</span><span class='line'><span class="n">temp_c</span> <span class="o">*=</span> <span class="o">.</span><span class="mo">0625</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not overly complicated but it took some work and time reading through the datasheet. Now apply this to everything in your project; display, buttons, switches, etc.</p>

<h2>Gimme the Abstraction</h2>

<p>What I wanted was to drop a module into my project that had all of this code I previously figured out wrapped up nicely and ready to use. So here is how I get a temperature reading from the TMP102 with the ucasts Raspberry Pi python module.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">ucasts</span> <span class="kn">import</span> <span class="n">TMP102</span>
</span><span class='line'><span class="n">temp_sensor</span> <span class="o">=</span> <span class="n">TMP102</span><span class="p">()</span>
</span><span class='line'><span class="n">tempF</span> <span class="o">=</span> <span class="n">temp_sensor</span><span class="o">.</span><span class="n">get_temp_in_f</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The library handles the I²C bus and all other sensor-specific details. I&rsquo;ve added a handful of components already and intend to expand it as I experiment with more modules for &micro;Cast episodes. I&rsquo;ve tried to thoroughly document it so it&rsquo;s easy to pick up and use.</p>

<p><a href="https://github.com/sidwarkd/ucasts_pi">&micro;Casts Raspberry Pi Library</a></p>

<p>If you do use the library I&rsquo;d love to hear about it and I&rsquo;m always happy to answer any questions.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #16: Pi + Express + Bootstrap + Angular FTW!]]></title>
    <link href="http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular/"/>
    <updated>2014-04-14T23:19:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/14/pi_express_bootstrap_angular</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]:</strong> I&rsquo;ve had requests to post the finished code on Github for those that want to just play with the completed app. It&rsquo;s now available at <a href="https://github.com/sidwarkd/pimonitor">https://github.com/sidwarkd/pimonitor</a>.</p>

<p>About a month ago I came across the <a href="http://lifehacker.com/command-pi-monitors-your-raspberry-pi-from-your-phone-1561340630">CommandPi</a> iOS app. It looked interesting so I paid the 99 cents and downloaded it to my iPad. The problem was, it didn&rsquo;t work. I would provide my SSH credentials and after logging in the program would crash. So like any curious developer, instead of waiting for a fix I set out to write my own.</p>

<p>To be fair to the creator of <a href="https://itunes.apple.com/us/app/command-pi/id830462681?mt=8">CommandPi</a>, what you are about to see is not meant to take anything away from that app. The app creator has put together a very nice UI and the crashing issue has been fixed. I just wanted to see how easy or hard it would be to create a knock off using <a href="http://expressjs.com/">ExpressJS</a>, <a href="http://angularjs.org/">Angular</a> and <a href="http://getbootstrap.com/">Bootstrap</a>.</p>

<br/>


<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/zprWNhB0NeU" frameborder="0" allowfullscreen></iframe>




<!-- more -->




<br/>


<br/>


<p>In <a href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/">µCast #14</a> and <a href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/">µCast #15</a> we created the plumbing necessary to grab most of the information necessary to create our app. We also expose the <a href="http://blog.microcasts.tv/2013/10/25/query-temperature-on-raspberry-pi/">temperature reading given by the Pi</a>. This episode was shot in a single take (with light editing for time) showing how to pull various technologies together to create a web application for monitoring our Raspberry Pi.</p>

<p>This is the pinode_stats.gist used in the video.</p>

<div><script src='https://gist.github.com/sidwarkd/10226198.js?file=pinode_stats.js'></script>
<noscript><pre><code>'use strict'

// An example of accessing system information on the Raspberry Pi with NodeJS

var fs = require('fs');

var PiStats = function(){
  var stats = {};
  var _currentCPUInfo = {total:0, active:0};
  var _previousCPUInfo = {total:0, active:0};

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      stats.memTotal = Math.floor(getValFromLine(lines[0]) / 1024);
      stats.memFree = Math.floor(getValFromLine(lines[1]) / 1024);
      stats.memCached = Math.floor(getValFromLine(lines[3]) / 1024);
      stats.memUsed = stats.memTotal - stats.memFree;
      stats.memPercentUsed = Math.ceil(((stats.memUsed - stats.memCached) / stats.memTotal) * 100);

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    _previousCPUInfo.active = _currentCPUInfo.active;
    _previousCPUInfo.idle = _currentCPUInfo.idle;
    _previousCPUInfo.total = _currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      _currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      _currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        _currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      _currentCPUInfo.active = _currentCPUInfo.total - _currentCPUInfo.idle
      _currentCPUInfo.percentUsed = calculateCPUPercentage(_previousCPUInfo, _currentCPUInfo);

      stats.cpuUsage = _currentCPUInfo.percentUsed;

      if(cb !== undefined)
        cb(null, stats);
    });
  };

  var getCurrentTemperature = function(cb){
    // Uncomment the next 3 lines for testing on regular linux and comment
    // out the fs.readFile block
    //stats.tempC = 42.3;
    //stats.tempF = 102.5;
    //cb(null, stats);
    fs.readFile('/sys/class/thermal/thermal_zone0/temp', 'utf8', function(err, data){
      var temp = data.match(/[0-9]+/gi);
      stats.tempC = parseInt(temp[0]) / 1000;
      stats.tempF = stats.tempC * 1.80 + 32.00;

      if(cb !== undefined)
        cb(null, stats);
    });
  }

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    update: function(cb){
      getMemoryInfo(function(err, data){
        getCPUInfo(function(err1, data1){
          getCurrentTemperature(function(err2, data2){
            cb(err2, data2);
          });
        });
      });
    },
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
        return;
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

module.exports = PiStats;

// Example usage

// var stats = require('./pinode_stats.js');
// stats.update(function(err, data){
//   console.log(data);
// });

</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Hacking Cheat Sheet]]></title>
    <link href="http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet/"/>
    <updated>2014-04-02T23:29:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/04/02/raspberry-pi-hacking-cheat-sheet</id>
    <content type="html"><![CDATA[<h1 style="text-align:center"><a href="http://blog.microcasts.tv/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf"><img src="http://blog.microcasts.tv/images/cheat_sheet_img.jpg" alt="Cheat Sheet Image"/></a></h1>


<p>As part of my Skillshare class <a href="http://www.skillshare.com/classes/technology/Unleash-The-Raspberry-Pi-Through-Physical-Computing/2109089069">Unleash The Raspberry Pi Through Physical Computing</a> I created a cheat sheet that I reference when working on hardware projects involving the Pi.</p>

<p>You may find it useful when working on your own projects so feel free to download and share. Let me know if you think I&rsquo;m missing something important. I&rsquo;m working on an HTML version and will update this post when it&rsquo;s ready.</p>

<p><a href="http://blog.microcasts.tv/assets/Unleash_The_Pi_Cheat_Sheet_v1.pdf">Rasperry Pi Hacker&rsquo;s Cheat Sheet</a></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #15: CPU Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-20T22:41:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/20/cpu-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this µCast we cover the very basics of CPU usage on the Raspberry Pi and show you how to figure out how hard your ARM processor is working in realtime.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/DqGVTUsMuFI" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code contain the memory examples from µCast #14 as well as the CPU usage code in Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>


<h3>Python Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[µCast #14: Memory Usage on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi/"/>
    <updated>2014-03-15T23:37:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/15/memory-usage-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>In this µCast we cover the very basics of RAM usage on the Raspberry Pi and show you how to figure out how much memory your Pi is using at any given time and how to get some of it back.</p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/EqyVlTP4R5M" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Sample Code</h2>

<p>The following chunks of code are just quick examples of how you can query memory information using Python or NodeJS. <strong>This code is not production ready as it does little to no error checking.</strong></p>

<h3>NodeJS Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.js'></script>
<noscript><pre><code>'use strict'

// A very simple nodeJS script that demonstrates how you can access
// memory usage information similar to how free -m works on the
// Raspberry Pi. Goes with µCast #14. http://youtu.be/EqyVlTP4R5M
 
 
// Usage: node pi_mem.js
// Example Output
//
// total    used    free    cached
// 469      65      404     31
// Memory Usage:    7%

var fs = require('fs');

var PiStats = function(){

  var memInfo = {};
  var currentCPUInfo = {total:0, active:0};
  var lastCPUInfo = {total:0, active:0};

  function getValFromLine(line){
    var match = line.match(/[0-9]+/gi);
    if(match !== null)
      return parseInt(match[0]);
    else
      return null;
  }

  var getMemoryInfo = function(cb){
    fs.readFile('/proc/meminfo', 'utf8', function(err, data){
      if(err){
        cb(err);
        return;
      }
      var lines = data.split('\n');
      memInfo.total = Math.floor(getValFromLine(lines[0]) / 1024);
      memInfo.free = Math.floor(getValFromLine(lines[1]) / 1024);
      memInfo.cached = Math.floor(getValFromLine(lines[3]) / 1024);
      memInfo.used = memInfo.total - memInfo.free;
      memInfo.percentUsed = Math.ceil(((memInfo.used - memInfo.cached) / memInfo.total) * 100);

      cb(null, memInfo);
    });
  };

  var calculateCPUPercentage = function(oldVals, newVals){
    var totalDiff = newVals.total - oldVals.total;
    var activeDiff = newVals.active - oldVals.active;
    return Math.ceil((activeDiff / totalDiff) * 100);
  };

  var getCPUInfo = function(cb){
    lastCPUInfo.active = currentCPUInfo.active;
    lastCPUInfo.idle = currentCPUInfo.idle;
    lastCPUInfo.total = currentCPUInfo.total;

    fs.readFile('/proc/stat', 'utf8', function(err, data){
      if(err){
        if(cb !== undefined)
          cb(err);
        return;
      }
      var lines = data.split('\n');
      var cpuTimes = lines[0].match(/[0-9]+/gi);
      currentCPUInfo.total = 0;
      // We'll count both idle and iowait as idle time
      currentCPUInfo.idle = parseInt(cpuTimes[3]) + parseInt(cpuTimes[4]);
      for (var i = 0; i &lt; cpuTimes.length; i++){
        currentCPUInfo.total += parseInt(cpuTimes[i]);
      }
      currentCPUInfo.active = currentCPUInfo.total - currentCPUInfo.idle
      currentCPUInfo.percentUsed = calculateCPUPercentage(lastCPUInfo, currentCPUInfo);

      if(cb !== undefined)
        cb(null, currentCPUInfo);
    });
  };

  return{
    getMemoryInfo: getMemoryInfo,
    getCPUInfo: getCPUInfo,
    printMemoryInfo: function(){
      getMemoryInfo(function(err, data){
        console.log(&quot;total\tused\tfree\tcached&quot;);
        console.log( data.total + &quot;\t&quot; + data.used + &quot;\t&quot; + data.free + &quot;\t&quot; + data.cached );
        console.log(&quot;Memory Usage:\t&quot; + data.percentUsed + &quot;%&quot;);
      });
    },
    printCPUInfo: function(){
      getCPUInfo(function(err, data){
        console.log(&quot;Current CPU Usage: &quot; + data.percentUsed + &quot;%&quot;);
      });
    }
  };
}();

PiStats.printMemoryInfo();
console.log(&quot;&quot;)
setInterval(PiStats.printCPUInfo, 1000);
</code></pre></noscript></div>


<h3>Python Sample</h3>

<div><script src='https://gist.github.com/sidwarkd/9578213.js?file=pi_stats.py'></script>
<noscript><pre><code># A very simple python script that demonstrates how you can access
# memory and cpu usage information similar to how free and top 
# work on the Raspberry Pi. Goes with uCast #14 and #15.

# Usage: python pi_stats.py

import re, time, sys

class PiStats(object):
  def __init__(self):
    self.total_memory = None
    self.free_memory = None
    self.cached_memory = None
    self.lastCPUInfo = {'total':0, 'active':0}
    self.currentCPUInfo = {'total':0, 'active':0}
    self.temp_in_celsius = None

  def calculate_cpu_percentage(self):
    total_diff = self.currentCPUInfo['total'] - self.lastCPUInfo['total']
    active_diff = self.currentCPUInfo['active'] - self.lastCPUInfo['active']
    return round(float(active_diff) / float(total_diff), 3) * 100.00

  def update_stats(self):
    # Read memory usage from /proc/meminfo
    with open('/proc/meminfo', 'r') as mem_file:
      # Remove the text description, kB, and whitespace before
      # turning file lines into an int
      for i, line in enumerate(mem_file):
        if i == 0: # Total line
          self.total_memory = int(line.strip(&quot;MemTotal: \tkB\n&quot;)) / 1024
        elif i == 1: # Free line 
          self.free_memory = int(line.strip(&quot;MemFree: \tkB\n&quot;)) / 1024
        elif i == 3: # Cached line
          self.cached_memory = int(line.strip(&quot;Cached: \tkB\n&quot;)) / 1024

    self.lastCPUInfo['total'] = self.currentCPUInfo['total']
    self.lastCPUInfo['active'] = self.currentCPUInfo['active']
    self.currentCPUInfo['total'] = 0
    with open('/proc/stat', 'r') as cpu_file:
      for i, line in enumerate(cpu_file):
        if i == 0: 
          cpuStats = re.findall('([0-9]+)', line.strip())
          self.currentCPUInfo['idle'] = int(cpuStats[3]) + int(cpuStats[4])
          for t in cpuStats:
            self.currentCPUInfo['total'] += int(t)

          self.currentCPUInfo['active'] = self.currentCPUInfo['total'] - self.currentCPUInfo['idle']
          self.currentCPUInfo['percent'] = self.calculate_cpu_percentage()


  def get_memory_info(self):
    # In linux the cached memory is available for program use so we'll
    # include it in the free amount when calculating the usage percent
    used_val = (self.total_memory - self.free_memory)
    free_val = (self.free_memory)
    percent_val = float(used_val - self.cached_memory) / float(self.total_memory)
    return {'total': self.total_memory, 'cached': self.cached_memory,  'used': used_val, 'free': free_val, 'percent': round(percent_val, 3) * 100.00 }

  def get_cpu_info(self):
    return self.currentCPUInfo


stats = PiStats()
stats.update_stats()
meminfo = stats.get_memory_info()

print &quot;total\tused\tfree\tcached&quot;
print &quot;%i\t%i\t%i\t%i&quot;%(meminfo['total'],meminfo['used'],meminfo['free'],meminfo['cached'])
print &quot;Memory Usage:\t%i%%&quot;%(meminfo['percent'])
print &quot;\n&quot;

try:
  while True:
    cpu_info = stats.get_cpu_info()
    print &quot;CPU Usage:\t%i%%&quot;%(cpu_info['percent'])
    time.sleep(2);
    stats.update_stats()
except KeyboardInterrupt:
  print &quot;Exiting.\n&quot;
  sys.exit(0)</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&micro;Tip: Fixing Tight Breadboards]]></title>
    <link href="http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards/"/>
    <updated>2014-03-12T23:33:00-06:00</updated>
    <id>http://blog.microcasts.tv/2014/03/12/fixing-tight-breadboards</id>
    <content type="html"><![CDATA[<p>Have you ever bought a breadboard that had extremely tight connection terminals? The kind that you can&rsquo;t connect anything to because everything just bends. I get that breadboards need to securely hold things but not being able to easily insert a resistor or capacitor is just ridiculous.</p>

<p>My suggestion is the find a breadboard the is as smooth as butter to connect to and never stray from it. Surprisingly enough, I find Radio Shack breadboards to have very nice connection terminals that require no break-in.</p>

<h3>How to Fix It</h3>

<p>If you do have a breadboard that has overly tight terminals there is an easy way to fix it although it does take a little time. Simply grab a pair of pliers and a length of male header (4 to 5 pins long). Grab the short side of the header pins firmly with the pliers and then push the header pins into the terminals. With a length of 5 pins you can handle an entire vertical row at a time. That&rsquo;s all there is to it. After doing this your components should slide easily and securely into your breadboard. Here&rsquo;s a vine showing the process.</p>

<iframe class='vine-embed' src='https://vine.co/v/MmxpprQ1Wlg/embed/simple' width='600' height='600' frameborder='0'></iframe>


<script async src='http://blog.microcasts.tv//platform.vine.co/static/scripts/embed.js' charset='utf-8'></script>


      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspi-Plotly With TMP102 Sensor]]></title>
    <link href="http://blog.microcasts.tv/2014/03/01/raspi-plotly-with-tmp102-sensor/"/>
    <updated>2014-03-01T23:40:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/03/01/raspi-plotly-with-tmp102-sensor</id>
    <content type="html"><![CDATA[<p>I recently came across an instructable about <a href="http://www.instructables.com/id/Streaming-Data-Visualization-Plotly-Raspberry-Pi/?ALLSTEPS">streaming temperature data to plot.ly</a>. I wanted to go through their example setup but didn&rsquo;t have the same kind of temperature sensor. So I created a screencast showing how I modified their source code to use the streaming service with my <a href="https://www.sparkfun.com/products/11931">TMP102 Sensor from Sparkfun</a>.</p>

<p>My modified code can be found <a href="https://gist.github.com/sidwarkd/9614055">as a gist on github</a></p>

<iframe width="560" height="315" src="http://blog.microcasts.tv//www.youtube.com/embed/IIcM1nR-omg" frameborder="0" allowfullscreen></iframe>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking Olympic Medals with the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/02/20/tracking-olympic-medals-with-the-raspberry-pi/"/>
    <updated>2014-02-20T00:07:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/20/tracking-olympic-medals-with-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure why I waited so long to do this now that the Olympics are coming to an end. The thought came to me today, &ldquo;I wonder how long it would take me to hack together a script to track and display medal counts.&rdquo; Well, I had to find out and below is the result. <strong>Disclaimer:</strong> I was not going for neat, well-organized code here.  I was going for speed so please be gentle.</p>

<h2>The Platform</h2>

<p>I cheated a little bit in that I already had the Pi configured and some hardware ready to go from my <a href="http://www.skillshare.com/classes/technology/Unleash-The-Raspberry-Pi-Through-Physical-Computing/2109089069/">Skillshare Class</a> (which is now free if you want to check it out) so I figured I&rsquo;d just use what I already had. The project from the Skillshare class includes an LED, temperature sensor, and other things but all I really needed for this project was the <a href="https://www.sparkfun.com/products/11442">seven segment display from Sparkfun</a>. I was ready to immediately start coding in Python.</p>

<h2>The Data Feed</h2>

<p>My first step was to find a suitable data source for the medal count. It really came down to two sources and how easily it would be to parse the data.  The first was <a href="http://www.nbcolympics.com/medals">NBC</a> and the second was the official <a href="http://www.sochi2014.com/en/medal-standings">Sochi Olympics site</a>. I liked the official site a little better because the html for the medals had specific css classes that would make extracting the data very straighforward. The problem I ran into though was when I ran my initial version of the script I got a <strong>Forbidden</strong> response.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/sochi_forbidden.jpg" title="Forbidden Response" alt="Forbidden Response"></h1>


<p>I assume this has something to do with the Agent header and them trying to prevent people like me from mooching off their site. Well played sochi.ru, well played.  Fortunately for us the good folks at NBC do not have the same concern so that&rsquo;s where I ended up getting the data.  Here is what part of the page looks like and has a url of <a href="http://www.nbcolympics.com/medals">http://www.nbcolympics.com/medals</a>.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/medal_count_display.jpg" title="Medal Count Display" alt="Medal Count Display"></h1>


<p>So how do we fetch just the medal counts that we want to display?  Well, in Chrome all we have to do is right-click on the text &ldquo;United States of America&rdquo; and do <strong>Inspect Element</strong> to expose the page HTML which looks like this.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/medal_count_html.jpg" title="Medal Count HTML" alt="Medal Count HTML"></h1>


<p>This was my first time parsing HTML in Python so there are probably much better ways to do this. If so please tell me about it in the comments so I can learn something new. I chose to use some simple XPATH to locate the anchor element with the country name and then navigate to the neighboring elements with the medal counts in them.  The result was this.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="n">page</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&quot;http://www.nbcolympics.com/medals&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="n">lxml</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//a[text()=&quot; United States of America&quot;]/@href&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">nameNode</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">getparent</span><span class="p">()</span><span class="o">.</span><span class="n">getparent</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">goldNode</span> <span class="o">=</span> <span class="n">nameNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span><span class='line'>  <span class="n">silverNode</span> <span class="o">=</span> <span class="n">goldNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span><span class='line'>  <span class="n">bronzeNode</span> <span class="o">=</span> <span class="n">silverNode</span><span class="o">.</span><span class="n">getnext</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting the actual integer value of the medal counts was then trivial. Remember, parsing out of the HTML will give you the values in strings.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="n">gold_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">goldNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>  <span class="n">silver_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">silverNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>  <span class="n">bronze_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">bronzeNode</span><span class="o">.</span><span class="n">text_content</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Displaying the Data</h2>

<p>With the data in hand it was just a matter of getting it onto the 7 segment display. In my Skillshare class I show how to configure and use SPI on the Pi to display stuff on a simple seven segment display so I already had all of the code for that. I just needed to format the display string appropriately. As my real estate was limited I decided to just use simple strings like &ldquo;to:23&rdquo; for the total count, &ldquo;go:14&rdquo; for gold, etc. I display each count 3 times and then query NBC again for an updated count. The interval could be much greater I suppose as medals don&rsquo;t change every 10 seconds.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="k">def</span> <span class="nf">display_medal_counts</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">gold</span><span class="p">,</span> <span class="n">silver</span><span class="p">,</span> <span class="n">bronze</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">gold</span> <span class="o">+</span> <span class="n">silver</span> <span class="o">+</span> <span class="n">bronze</span>
</span><span class='line'>    <span class="n">totalstr</span> <span class="o">=</span> <span class="s">&quot;to&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>    <span class="n">goldstr</span> <span class="o">=</span> <span class="s">&quot;go&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">gold</span><span class="p">)</span>
</span><span class='line'>    <span class="n">silverstr</span> <span class="o">=</span> <span class="s">&quot;si&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">silver</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bronzestr</span> <span class="o">=</span> <span class="s">&quot;br&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">bronze</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">totalstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">goldstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">silverstr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">clear_display</span><span class="p">(</span><span class="n">bus</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="n">bronzestr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spi_send</span><span class="p">(</span><span class="n">bus</span><span class="p">,</span> <span class="p">[</span><span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">])</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrap Up</h2>

<p>Throwing this together took me a little over an hour, much of which was spent learning how to parse HTML in Python. Here&rsquo;s a Vine to show it working. Not sure why the &lsquo;G&rsquo; doesn&rsquo;t use the middle hyphen segment.</p>

<iframe class="vine-embed" src="https://vine.co/v/MZTDJTxIKBp/embed/simple" width="480" height="480" frameborder="0"></iframe>


<script async src="http://blog.microcasts.tv//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<br/>


<br/>


<p>It&rsquo;s a great example of how the Raspberry Pi is great for rapid prototyping of an idea. The full code can be found <a href="https://gist.github.com/sidwarkd/9108668">in this gist</a>.</p>

<p>What Olympic-themed hardware projects can you think of?</p>

      
      <p><a href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=1968192" rel="tag" style="display:none">CodeProject</a></p>
      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salvaging a $100 USB Microphone]]></title>
    <link href="http://blog.microcasts.tv/2014/02/06/salvaging-a-00-usb-microphone/"/>
    <updated>2014-02-06T21:47:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/06/salvaging-a-00-usb-microphone</id>
    <content type="html"><![CDATA[<h2>Back Story</h2>

<p>A while back a good friend of mine gave me a <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?ie=UTF8&amp;qid=1391757018&amp;sr=8-1&amp;keywords=blue+microphone+yeti">Blue Yeti microphone</a> from work that he said they were going to throw away because the mini USB port had ripped out of it. I told him I&rsquo;d take it and see if I could fix it. It seemed like the only thing wrong with it was that the connector had literally been ripped out of the case. How they were able to accomplish that I don&rsquo;t know. So I did what any self-respecting DIYer would do: I called Blue and asked if they could give me the part number for the USB connector.</p>

<blockquote><p>&#8220;I&#8217;m sorry, I can&#8217;t give you that information. It&#8217;s proprietary&#8221;</p></blockquote>


<p>Really? A standard mini USB connector is proprietary? Give me a break Blue. So I did what any self-respecting Twitter user would do.</p>

<p> <blockquote class="twitter-tweet" lang="en"><p>Wow <a href="https://twitter.com/BlueMicrophones">@BlueMicrophones</a> won&#39;t give me the mini usb part number so I can fix a busted mic someone trashed. Not very <a href="https://twitter.com/search?q=%23DIY&amp;src=hash">#DIY</a> friendly. <a href="https://twitter.com/search?q=%23servicefail&amp;src=hash">#servicefail</a></p>&mdash; Kevin Sidwar (@KevinSidwar) <a href="https://twitter.com/KevinSidwar/statuses/336590188488826880">May 20, 2013</a></blockquote></p>

<script async src="http://blog.microcasts.tv//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>The Repair</h2>

<p>Having vented my rage on Twitter I logged on to <a href="http://www.mouser.com/Connectors/USB-Connectors/_/N-88hmf/">Mouser</a> to find a suitable replacement. I found one that I thought would work but never got around to ordering it. Fast forward almost a year and I decide I want to try to fix it but don&rsquo;t want to find the part again and wait for it to ship so I figured I might be able to just hack up a USB cable and solder it directly to the PCB where the connector ripped out. Here&rsquo;s how it looked when I took it apart.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/broken_mini_usb.jpg" title="Broken Mini USB Connector" alt="Broken Mini USB Connector"></h1>


<p>Again, how they managed to do this is beyond me. But it came off fairly clean so all I needed to do was remove the legs from the connector and solder in leads from a USB cable I cut. But which wires go to which holes? Well, if you take a closer look at the back side of the PCB you can get a pretty decent idea of which connections are which. We know that USB uses 4 connections: Supply, Ground, D+, and D-.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/usb_connections.jpg" title="Closeup of UBS connection traces" alt="Closeup of UBS connection traces"></h1>


<p>From this image we can guess that the thicker traces are the power lines and the thinner ones are the USB data lines. One of the connection holes isn&rsquo;t connected to anything. So figuring out which power line is ground was easy. Just set the meter to continuity mode, connect one probe to a known ground point (like an internal metal mount) and then see which of the thick traces gives you the continuity beep. That coupled with this diagram I found for a similar USB connector allowed me to identify D+ and D-.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/usb_connector_pinout.jpg" title="Pinout connections" alt="Pinout connections"></h1>


<h2>Soldering</h2>

<p>The solder work on this job was a little challenging for me. I quickly gave up on trying to solder the USB cable directly to the connector holes as the tiny wires were hard to handle. Instead I soldered some 22AWG leads from the connector holes that could exit the mic case through the mini USB opening and then I soldered the USB cable wires to those leads. Here are some shots of that.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/leads_soldered.jpg" title="Leads soldered on" alt="Leads soldered on"></h1>




<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/leads_usb_opening.jpg" title="Leads coming out of case" alt="Leads coming out of case"></h1>


<p>I made sure all of the USB wires were isolated from each other using shrink wrap and then finished the whole job up with a big piece of shrink wrap over everything to leave a nice clean look. When I plugged it in it worked first time.</p>

<h2>Moral</h2>

<p>With just a little knowledge and some soldering skills there are lots of things that can be reclaimed from the junk pile.</p>

<p>In closing I&rsquo;d like to thank corporate america for having so much money that they just trash $100 mics because connectors break off. More importantly though I&rsquo;d like to send a big &ldquo;Suck It&rdquo; to Blue for hating on the DIY fix-it community. It&rsquo;s just a mini USB connector. I didn&rsquo;t need company secrets to fix it.</p>

<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/repaired_mic.jpg" title="Repaired Mic" alt="Repaired Mic"></h1>


<p>P.S. Blue, if you had simply given me the part number I would have sung your praises on social networks and to anybody in the tech space that would listen. I also would have gone to you first as soon as I needed a new mic. Instead I&rsquo;ll never recommend your microphones to anybody and will personally never pay you a cent for one.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Skillshare Class Available]]></title>
    <link href="http://blog.microcasts.tv/2014/02/04/raspberry-pi-skillshare-class/"/>
    <updated>2014-02-04T21:16:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/02/04/raspberry-pi-skillshare-class</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]:</strong> After a lot of thought I&rsquo;ve decided to release the class for free.  You can still use the link below but the cost is now $0. I would greatly appreciate any feedback on the course because I want it to be as useful as possible.</p>

<p>My class <a href="http://skl.sh/1cTcEbF">Unleash The Raspberry Pi Through Physical Computing</a> is now available on Skillshare. The class covers the 3 main hardware capabilities exposed by the GPIO header on the Pi:</p>

<ul>
<li> Digital I/O</li>
<li> SPI</li>
<li> I2C</li>
</ul>


<h1 style="text-align:center"><img src="http://blog.microcasts.tv/images/completed_clean_light_angle.jpg" alt="Simple Home Monitor with Raspberry Pi"/></h1>


<p>In addition to covering each of these topics I also show you how to get your Raspberry Pi connected to Twitter. It&rsquo;s the first class on Skillshare to cover the Raspberry Pi and contains just <strong>over 3 hours of video instruction</strong>. It&rsquo;s packed with tips and tricks for creating your own hardware projects and students that enroll get access to a cheat sheet I&rsquo;ve put together for creating hardware projects with the Raspberry Pi. If you&rsquo;d like to enroll use the link at the top of this post to <strong>get 50% off</strong> and get the class for only $12.50 USD.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Python Scripts from Dropbox on the Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi/"/>
    <updated>2014-01-27T22:59:00-07:00</updated>
    <id>http://blog.microcasts.tv/2014/01/27/running-python-scripts-from-dropbox-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever tried writing code on your Raspberry Pi from just the plain terminal window then you&rsquo;ve probably used Nano or Vim. If you&rsquo;re like me you wished you could have used your favorite IDE or text editor on another machine. When I develop for the Raspberry Pi my normal use case is to SSH in and write code via Nano. While this works just fine I&rsquo;d prefer to have the bigger real estate afforded by my desktop monitors.</p>

<h3>What is <code>preheat</code></h3>

<p><code>preheat</code> is my solution to this problem. It allows me to pull scripts down from my Dropbox account at execution time. When I finally decided I didn&rsquo;t want to code directly on the Pi anymore the very first thing that came to my mind was to install <a href="http://dropbox.com">Dropbox</a> on the Pi and just have it sync with a folder on my dev machine. It only took a few searches to realize that a Dropbox client for the Pi doesn&rsquo;t exist. So I found a few other solutions like <a href="http://en.wikipedia.org/wiki/Rsync">rsync</a>, <a href="http://owncloud.org">ownCloud</a> and others but everything I found was either too much work or just plain overkill for what I needed. So <code>preheat</code> was born.</p>

<p>It&rsquo;s a simple Python script that will query your Dropbox account for the file you want to run and pull it down. So normally I&rsquo;d use the following to run a script I&rsquo;m working on:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python myscript.py
</span></code></pre></td></tr></table></div></figure>


<p>With <code>preheat</code> I would run it like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo python preheat myscript.py
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t need to have <strong>myscript.py</strong> on the Raspberry Pi. It&rsquo;s on my desktop machine in a dropbox folder being updated every time I change it. When I run it via <code>preheat</code> it will scan my Dropbox account, find it, and pull it down for me.</p>

<p>If you&rsquo;d like to see how it works <a href="https://github.com/sidwarkd/preheat">check out the source code on Github</a></p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eagle How-To: Export Board Image]]></title>
    <link href="http://blog.microcasts.tv/2013/11/03/eagle-how-to-export-board-image/"/>
    <updated>2013-11-03T00:30:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/11/03/eagle-how-to-export-board-image</id>
    <content type="html"><![CDATA[<p>Sometimes when you&rsquo;re working on a board design you don&rsquo;t want to wait to get a prototype board from a fab house. For simple or one off boards you can just make them at home. In order to do that we need a way to get our board design out of Eagle and onto a PCB. Most home-etch processes I&rsquo;ve seen require, in some form, a to-scale printout of the board. Personally I use the <a href="http://www.pcbfx.com/">Pulsar PCB products</a> which I&rsquo;ve found to work very well. The following is my process for getting the board design printed out.</p>

<ol>
<li>  Launch Eagle and open the board view of your project.</li>
<li>  Turn the grid off via the <strong>View->Grid</strong> menu or using the command: &ldquo;grid off&rdquo;</li>
<li>  Turn off all layers except the the ones that you want to print. I like to see layers 1, 17, 18 and 20. That&rsquo;s top, pads, vias and dimension. If your board is two sided you only want to print one side at a time.</li>
<li>  If the background is black we need to make it white. Do this via the <strong>Options->User Interface</strong> dialog or use the command: &ldquo;set palette white;window;&rdquo;.</li>
<li>  File->Export->Image</li>
<li>  Select a destination file. I prefer to use the .png format.</li>
<li>  Check the <strong>Monochrome</strong> checkbox</li>
<li>  Change the resolution to a multiple of your screen dpi. The default screen resolution in Windows is 96 dpi so I normally use 384 which is 96 x 4.</li>
<li>  Click <strong>Ok</strong> to export the image.</li>
</ol>


<p>  You now have an image file of your board that should scale perfectly to size. I normally just drag it into a document in OpenOffice Writer. If it goes into your document full size you just need to scale it to 25% of original size and it will be perfectly to-scale.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing MPLABX on Ubuntu: 64-bit Tip]]></title>
    <link href="http://blog.microcasts.tv/2013/10/26/installing-mplabx-on-ubuntu-64-bit-tip/"/>
    <updated>2013-10-26T00:16:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/10/26/installing-mplabx-on-ubuntu-64-bit-tip</id>
    <content type="html"><![CDATA[<p>While trying to install MPLABX on my Ubuntu machine I was having issues running the installer. Nothing would happen. After some searching I found that the installer cannot be run in a 64-bit environment without installing some 32-bit dependencies first. To fix simply run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install libc6:i386
</span></code></pre></td></tr></table></div></figure>


<p>This will install the minimal 32-bit libraries. If you are still having issues you can install the full 32-bit library set with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install ia32-libs
</span></code></pre></td></tr></table></div></figure>


<p>Here is the original forum question that led me to the solution.</p>

<ul>
<li> <a href="http://askubuntu.com/questions/145716/cannot-install-mplab-ide-x-from-the-terminal-silently-exits">Cannot install MPLAB IDE X from the terminal &ndash; silently exits</a></li>
</ul>


      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Temperature on Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2013/10/25/query-temperature-on-raspberry-pi/"/>
    <updated>2013-10-25T23:33:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/10/25/query-temperature-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I recently installed a Raspberry Pi in a server closet at home. I have it connected to an older laser printer so it acts as a print server. Since it is in a small space I want to be able to monitor the temperature from time to time. After some searching online I found two ways to do this from the command line that work quite well.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@raspberrypi ~ <span class="nv">$ </span>/opt/vc/bin/vcgencmd measure_temp
</span></code></pre></td></tr></table></div></figure>


<p>The output of this command looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@raspberrypi ~ <span class="nv">$ </span>/opt/vc/bin/vcgencmd measure_temp
</span><span class='line'><span class="nv">temp</span><span class="o">=</span>43.3<span class="err">&#39;</span>C
</span></code></pre></td></tr></table></div></figure>


<p>The other way to display this information is to <strong>cat</strong> the contents of a file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@raspberrypi ~ <span class="nv">$ </span>cat /sys/class/thermal/thermal_zone0/temp
</span></code></pre></td></tr></table></div></figure>


<p>This time you will need to divide by 1000 to get the temp in degrees Celsius.</p>

<p>Output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>43312
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve notice that the two results can differ slightly but not by more than a few tenths of a degree Celsius.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Government Shutdown With A Raspberry Pi]]></title>
    <link href="http://blog.microcasts.tv/2013/10/09/monitor-government-shutdown-with-a-raspberry-pi/"/>
    <updated>2013-10-09T13:45:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/10/09/monitor-government-shutdown-with-a-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Last week I came across a tweet from <a href="https://twitter.com/eduardk" target="_blank">Eduard Koller</a>.</p>

<blockquote><p>Want to be notified when the Government is back up? Here&#8217;s a little script for you: http://bit.ly/16eAoDT</p><footer><strong>@eduardk</strong> <cite><a href='https://twitter.com/eduardk/statuses/385139079219671040'>twitter.com/eduardk/statuses/&hellip;</a></cite></footer></blockquote>


<p>He wrote a simple python script to check the status of the government shutdown. I couldn&rsquo;t resist the urge to apply a little hardware to the situation.<!-- more --></p>

<h3>Polarity Matters</h3>

<p>My first idea was to hook up a simple two line LCD display I had lying around and connect it to the Pi via SPI. Before I connected the display to the Pi I wanted to make sure I had powered it correctly so I plugged in my home made power supply (made from a wall supply) and nothing happened. Not having used this particular display in over a year I thought &ldquo;Oh, it must be blank until I send some data down the wire.&rdquo; So I left it plugged in, shut down my Pi, hooked up all the SPI connections and booted the Pi back up. I sent a few test messages via SPI but nothing was happening.</p>

<blockquote><p>That&#8217;s when I started to smell something cooking</p></blockquote>


<p>It wasn&rsquo;t the classic ozone smell but that scent you get when a stove burner is on. I put my hand over the display and could feel the heat coming off. I quickly unplugged it and felt the chip on the back. It was smoldering.</p>

<p>When I make simple wall supplies I ALWAYS attach a green lead to ground and a black lead to the positive rail. So when I went into my shop I grabbed one of those homemade guys and hooked him up. I later realized that I had hooked those leads up wrong and that green was +5V and black was ground. Ugh. So I switched them around and the display turned back on but was all black. After some searching in the datasheet I found a note saying that if you hook up the power to the display wrong it will immediately ruin the unit.</p>

<h3>Use an LED Instead</h3>

<p>Oh well. I paused project work for a moment to order <a href="https://www.crystalfontz.com/product/CFA634TFHKS" target="_blank">a new display</a> and then decided to settle for a simple LED approach. I modified Eduard&rsquo;s script so that it would still work as he had written it but also would accept a command line argument of &ldquo;pi&rdquo; that would forego the console output in favor of turning LEDs on and off. So after just a little modification and the use of the <a href="https://pypi.python.org/pypi/RPi.GPIO" target="_blank">RPi.GPIO</a> library I was up and running.</p>

<p><img src="https://pbs.twimg.com/media/BVrJUnvCcAExjE4.jpg:small"></p>

<p>Here&rsquo;s the code if you are interested in giving it a try or modifying it.</p>

<div><script src='https://gist.github.com/sidwarkd/6814331.js'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head prefix=&quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#&quot;&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;

  &lt;title&gt;Modified to add command line option for running on a Raspberry Pi using GPIO 17 and 18 to control status LEDs. Run from the command line with the argument &amp;quot;pi&amp;quot; to activate status LEDs. Assumes you have already installed the RPi.GPIO library.&lt;/title&gt;

  &lt;meta content=&quot;authenticity_token&quot; name=&quot;csrf-param&quot; /&gt;
&lt;meta content=&quot;q7g004bTADWxdOcfzwSjW9WPv2K70D2Y2GQNv1oyjZE=&quot; name=&quot;csrf-token&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=960&quot;&gt;


  &lt;link type=&quot;text/plain&quot; rel=&quot;author&quot; href=&quot;https://github.com/humans.txt&quot; /&gt;
  &lt;meta content=&quot;gist&quot; name=&quot;octolytics-app-id&quot; /&gt;&lt;meta content=&quot;collector.githubapp.com&quot; name=&quot;octolytics-host&quot; /&gt;

  &lt;link href=&quot;/assets/application-40431a953a4fe71f7abb47ce95f23da2.css&quot; media=&quot;screen, print&quot; rel=&quot;stylesheet&quot; /&gt;
  &lt;script src=&quot;/assets/application-0e9cfa9048fd8b9e3fe4ad1de9ce0047.js&quot;&gt;&lt;/script&gt;

    &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:site&quot; content=&quot;@github&quot;&gt;
  &lt;meta property=&quot;og:title&quot; content=&quot;sidwarkd/isgovtdown.py&quot;&gt;
  &lt;meta property=&quot;og:type&quot; content=&quot;githubog:gist&quot;&gt;
  &lt;meta property=&quot;og:url&quot; content=&quot;https://gist.github.com//sidwarkd/6814331&quot;&gt;
  &lt;meta property=&quot;og:image&quot; content=&quot;https://2.gravatar.com/avatar/e46905069165b34d2f844ad9d021e749?d=https%3A%2F%2Fidenticons.github.com%2F26833d7fb4fd61bc27490a6ac5117918.png&amp;amp;s=140&quot;&gt;
  &lt;meta property=&quot;og:site_name&quot; content=&quot;GitHub Gists&quot;&gt;
  &lt;meta property=&quot;og:description&quot; content=&quot;Modified to add command line option for running on a Raspberry Pi using GPIO 17 and 18 to control status LEDs. Run from the command line with the argument &amp;amp;quot;pi&amp;amp;quot; to activate status LEDs. Assumes you have already installed the RPi.GPIO library. - Gist is a simple way to share snippets of text and code with others.&quot;&gt;
  &lt;meta name=&quot;description&quot; content=&quot;Modified to add command line option for running on a Raspberry Pi using GPIO 17 and 18 to control status LEDs. Run from the command line with the argument &amp;amp;quot;pi&amp;amp;quot; to activate status LEDs. Assumes you have already installed the RPi.GPIO library. - Gist is a simple way to share snippets of text and code with others.&quot;&gt;

&lt;/head&gt;

&lt;body class=&quot; &quot;&gt;

  &lt;div id=&quot;wrapper&quot;&gt;
    

    &lt;div id=&quot;header&quot; class=&quot;header header-logged-out&quot;&gt;
      &lt;div class=&quot;container&quot; class=&quot;clearfix&quot;&gt;
        &lt;a class=&quot;header-logo-wordmark&quot; href=&quot;https://gist.github.com/&quot;&gt;
          &lt;span class=&quot;octicon octicon-logo-github&quot;&gt;&lt;/span&gt;
          &lt;span class=&quot;octicon-logo octicon-logo-gist&quot;&gt;&lt;/span&gt;
        &lt;/a&gt;

        &lt;div class=&quot;header-actions&quot;&gt;
          &lt;a class=&quot;button primary&quot; href=&quot;https://github.com/signup?return_to=gist&quot;&gt;Sign up for a GitHub Account&lt;/a&gt;
          &lt;a class=&quot;button&quot; href=&quot;https://gist.github.com/login?return_to=/sidwarkd/6814331&quot; data-skip-pjax&gt;Sign in&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;site-content&quot; id=&quot;js-pjax-container&quot; data-pjax-container&gt;
      &lt;div class=&quot; site-container js-site-container&quot; data-url=&quot;/sidwarkd/6814331&quot;&gt;
  
  &lt;meta content=&quot;true&quot; name=&quot;octolytics-dimension-public&quot; /&gt;&lt;meta content=&quot;6814331&quot; name=&quot;octolytics-dimension-gist_id&quot; /&gt;&lt;meta content=&quot;6814331&quot; name=&quot;octolytics-dimension-gist_name&quot; /&gt;&lt;meta content=&quot;false&quot; name=&quot;octolytics-dimension-anonymous&quot; /&gt;&lt;meta content=&quot;412390&quot; name=&quot;octolytics-dimension-owner_id&quot; /&gt;&lt;meta content=&quot;sidwarkd&quot; name=&quot;octolytics-dimension-owner_login&quot; /&gt;&lt;meta content=&quot;true&quot; name=&quot;octolytics-dimension-forked&quot; /&gt;&lt;meta content=&quot;6784503&quot; name=&quot;octolytics-dimension-parent_gist_id&quot; /&gt;&lt;meta content=&quot;6784503&quot; name=&quot;octolytics-dimension-parent_gist_name&quot; /&gt;&lt;meta content=&quot;false&quot; name=&quot;octolytics-dimension-parent_anonymous&quot; /&gt;&lt;meta content=&quot;1189197&quot; name=&quot;octolytics-dimension-parent_owner_id&quot; /&gt;&lt;meta content=&quot;eduardkoller&quot; name=&quot;octolytics-dimension-parent_owner_login&quot; /&gt;

&lt;div class=&quot;pagehead repohead&quot;&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;title-actions-bar&quot;&gt;
      &lt;ul class=&quot;pagehead-actions&quot;&gt;
      &lt;/ul&gt;
      &lt;h1 itemscope itemtype=&quot;http://data-vocabulary.org/Breadcrumb&quot; class=&quot;entry-title public&quot;&gt;
        &lt;span class=&quot;repo-label&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;mega-octicon octicon-gist&quot; &gt;&lt;/span&gt;
        &lt;div class=&quot;meta&quot;&gt;
          &lt;div class=&quot;gist-author&quot;&gt;
            &lt;img src=&quot;https://2.gravatar.com/avatar/e46905069165b34d2f844ad9d021e749?d=https%3A%2F%2Fidenticons.github.com%2F26833d7fb4fd61bc27490a6ac5117918.png&amp;s=140&quot; width=&quot;26&quot; height=&quot;26&quot;&gt;
            &lt;span class=&quot;author vcard&quot;&gt;
                &lt;span itemprop=&quot;title&quot;&gt;&lt;a href=&quot;/sidwarkd&quot;&gt;sidwarkd&lt;/a&gt;&lt;/span&gt;
            &lt;/span&gt; /
            &lt;strong&gt;&lt;a href=&quot;/sidwarkd/6814331&quot; class=&quot;js-current-repository&quot;&gt;isgovtdown.py&lt;/a&gt;&lt;/strong&gt;
          &lt;/div&gt;
          &lt;div class=&quot;gist-timestamp&quot;&gt;
              &lt;span class=&quot;datetime&quot;&gt;Last active &lt;time class=&quot;js-relative-date&quot; title=&quot;2013-10-03T18:49:07Z&quot; datetime=&quot;2013-10-03T18:49:07Z&quot;&gt;2013-10-03&lt;/time&gt;&lt;/span&gt;
              &lt;span class=&quot;text&quot;&gt; &amp;mdash; forked from &lt;a href=&quot;/eduardkoller/6784503&quot;&gt;eduardkoller/isgovtdown.py&lt;/a&gt;&lt;/span&gt;
          &lt;/div&gt;
      &lt;/h1&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&quot;gist-description container&quot;&gt;
  &lt;p&gt;Modified to add command line option for running on a Raspberry Pi using GPIO 17 and 18 to control status LEDs. Run from the command line with the argument &amp;quot;pi&amp;quot; to activate status LEDs. Assumes you have already installed the RPi.GPIO library.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;gist container js-gist-container&quot; data-version=&quot;dc2f579cf9e49e4d2775b1b887cbf031ada414d1&quot;&gt;
    &lt;div class=&quot;root-pane&quot;&gt;
  &lt;div class=&quot;menu-container&quot;&gt;
    &lt;ul class=&quot;menu gisttabs&quot;&gt;
      &lt;li&gt;
        &lt;a href=&quot;/sidwarkd/6814331&quot; class=&quot;selected&quot;&gt;
          Gist Detail
        &lt;/a&gt;
      &lt;/li&gt;

        &lt;li class=&quot;revision-count&quot;&gt;
          &lt;a href=&quot;/sidwarkd/6814331/revisions&quot; &gt;
            Revisions
            &lt;span class=&quot;counter&quot;&gt;2&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;


    &lt;/ul&gt;
  &lt;/div&gt;

  &lt;ul class=&quot;export-references&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;/sidwarkd/6814331/download&quot; class=&quot;minibutton&quot; data-skip-pjax=&quot;true&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;octicon octicon-cloud-download&quot;&gt;&lt;/span&gt;Download Gist&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;label for=&quot;url-field&quot;&gt;&lt;strong&gt;Clone&lt;/strong&gt; this gist&lt;/label&gt;
      &lt;input type=&quot;text&quot; readonly spellcheck=&quot;false&quot; class=&quot;url-field js-url-field js-cptoggle&quot; name=&quot;url-field&quot; value=&quot;https://gist.github.com/6814331.git&quot; data-cptoggle-display=&quot;/sidwarkd/6814331&quot;&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;label for=&quot;embed-field&quot;&gt;&lt;strong&gt;Embed&lt;/strong&gt; this gist&lt;/label&gt;
      &lt;input type=&quot;text&quot; readonly spellcheck=&quot;false&quot; class=&quot;url-field js-url-field&quot; name=&quot;embed-field&quot; value=&quot;&amp;lt;script src=&amp;quot;https://gist.github.com/sidwarkd/6814331.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&quot;&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;label for=&quot;link-field&quot;&gt;&lt;strong&gt;Link to&lt;/strong&gt; this gist&lt;/label&gt;
      &lt;input type=&quot;text&quot; readonly spellcheck=&quot;false&quot; class=&quot;url-field js-url-field&quot; name=&quot;link-field&quot; value=&quot;https://gist.github.com/sidwarkd/6814331&quot;&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


  &lt;div class=&quot;column files&quot;&gt;
        &lt;div id=&quot;file-isgovtdown-py&quot; class=&quot;bubble&quot;&gt;
          &lt;div class=&quot;file-box &quot;&gt;
            &lt;div class=&quot;meta&quot;&gt;
              &lt;div class=&quot;file-info&quot;&gt;
                &lt;span class=&quot;file-type-icon&quot;&gt;&lt;span class=&quot;octicon octicon-gist&quot;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;strong class=&quot;file-name js-selectable-text&quot;&gt;isgovtdown.py&lt;/strong&gt;
              &lt;/div&gt;
              &lt;div class=&quot;file-actions&quot;&gt;
                &lt;span class=&quot;file-language&quot;&gt;Python&lt;/span&gt;
                &lt;ul class=&quot;button-group&quot;&gt;
                  &lt;li&gt;&lt;a title=&quot;Permalink&quot; href=&quot;#file-isgovtdown-py&quot; class=&quot;file-actions-button tooltipped downwards permalink&quot;&gt;&lt;span class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a title=&quot;View Raw&quot; href=&quot;/sidwarkd/6814331/raw/29dd9bf42c8ce349e40132f46ce2d088dfe2974f/isgovtdown.py&quot; data-skip-pjax class=&quot;file-actions-button tooltipped downwards raw-url&quot;&gt;&lt;span class=&quot;octicon octicon-code&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;suppressed&quot;&gt;
              &lt;a class=&quot;js-show-suppressed-file&quot;&gt;File suppressed. Click to show.&lt;/a&gt;
            &lt;/div&gt;
            



    &lt;div class=&quot;file-data&quot;&gt;
      &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;lines highlight&quot;&gt;
        &lt;tr&gt;
          &lt;td class=&quot;line-numbers&quot;&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L1&quot; rel=&quot;file-isgovtdown-py-L1&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L2&quot; rel=&quot;file-isgovtdown-py-L2&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L3&quot; rel=&quot;file-isgovtdown-py-L3&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L4&quot; rel=&quot;file-isgovtdown-py-L4&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L5&quot; rel=&quot;file-isgovtdown-py-L5&quot;&gt;5&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L6&quot; rel=&quot;file-isgovtdown-py-L6&quot;&gt;6&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L7&quot; rel=&quot;file-isgovtdown-py-L7&quot;&gt;7&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L8&quot; rel=&quot;file-isgovtdown-py-L8&quot;&gt;8&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L9&quot; rel=&quot;file-isgovtdown-py-L9&quot;&gt;9&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L10&quot; rel=&quot;file-isgovtdown-py-L10&quot;&gt;10&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L11&quot; rel=&quot;file-isgovtdown-py-L11&quot;&gt;11&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L12&quot; rel=&quot;file-isgovtdown-py-L12&quot;&gt;12&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L13&quot; rel=&quot;file-isgovtdown-py-L13&quot;&gt;13&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L14&quot; rel=&quot;file-isgovtdown-py-L14&quot;&gt;14&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L15&quot; rel=&quot;file-isgovtdown-py-L15&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L16&quot; rel=&quot;file-isgovtdown-py-L16&quot;&gt;16&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L17&quot; rel=&quot;file-isgovtdown-py-L17&quot;&gt;17&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L18&quot; rel=&quot;file-isgovtdown-py-L18&quot;&gt;18&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L19&quot; rel=&quot;file-isgovtdown-py-L19&quot;&gt;19&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L20&quot; rel=&quot;file-isgovtdown-py-L20&quot;&gt;20&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L21&quot; rel=&quot;file-isgovtdown-py-L21&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L22&quot; rel=&quot;file-isgovtdown-py-L22&quot;&gt;22&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L23&quot; rel=&quot;file-isgovtdown-py-L23&quot;&gt;23&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L24&quot; rel=&quot;file-isgovtdown-py-L24&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L25&quot; rel=&quot;file-isgovtdown-py-L25&quot;&gt;25&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L26&quot; rel=&quot;file-isgovtdown-py-L26&quot;&gt;26&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L27&quot; rel=&quot;file-isgovtdown-py-L27&quot;&gt;27&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L28&quot; rel=&quot;file-isgovtdown-py-L28&quot;&gt;28&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L29&quot; rel=&quot;file-isgovtdown-py-L29&quot;&gt;29&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L30&quot; rel=&quot;file-isgovtdown-py-L30&quot;&gt;30&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L31&quot; rel=&quot;file-isgovtdown-py-L31&quot;&gt;31&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L32&quot; rel=&quot;file-isgovtdown-py-L32&quot;&gt;32&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L33&quot; rel=&quot;file-isgovtdown-py-L33&quot;&gt;33&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L34&quot; rel=&quot;file-isgovtdown-py-L34&quot;&gt;34&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L35&quot; rel=&quot;file-isgovtdown-py-L35&quot;&gt;35&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L36&quot; rel=&quot;file-isgovtdown-py-L36&quot;&gt;36&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L37&quot; rel=&quot;file-isgovtdown-py-L37&quot;&gt;37&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L38&quot; rel=&quot;file-isgovtdown-py-L38&quot;&gt;38&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L39&quot; rel=&quot;file-isgovtdown-py-L39&quot;&gt;39&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L40&quot; rel=&quot;file-isgovtdown-py-L40&quot;&gt;40&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L41&quot; rel=&quot;file-isgovtdown-py-L41&quot;&gt;41&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L42&quot; rel=&quot;file-isgovtdown-py-L42&quot;&gt;42&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L43&quot; rel=&quot;file-isgovtdown-py-L43&quot;&gt;43&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L44&quot; rel=&quot;file-isgovtdown-py-L44&quot;&gt;44&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L45&quot; rel=&quot;file-isgovtdown-py-L45&quot;&gt;45&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L46&quot; rel=&quot;file-isgovtdown-py-L46&quot;&gt;46&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L47&quot; rel=&quot;file-isgovtdown-py-L47&quot;&gt;47&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L48&quot; rel=&quot;file-isgovtdown-py-L48&quot;&gt;48&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L49&quot; rel=&quot;file-isgovtdown-py-L49&quot;&gt;49&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L50&quot; rel=&quot;file-isgovtdown-py-L50&quot;&gt;50&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L51&quot; rel=&quot;file-isgovtdown-py-L51&quot;&gt;51&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L52&quot; rel=&quot;file-isgovtdown-py-L52&quot;&gt;52&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L53&quot; rel=&quot;file-isgovtdown-py-L53&quot;&gt;53&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L54&quot; rel=&quot;file-isgovtdown-py-L54&quot;&gt;54&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L55&quot; rel=&quot;file-isgovtdown-py-L55&quot;&gt;55&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L56&quot; rel=&quot;file-isgovtdown-py-L56&quot;&gt;56&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L57&quot; rel=&quot;file-isgovtdown-py-L57&quot;&gt;57&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L58&quot; rel=&quot;file-isgovtdown-py-L58&quot;&gt;58&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L59&quot; rel=&quot;file-isgovtdown-py-L59&quot;&gt;59&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L60&quot; rel=&quot;file-isgovtdown-py-L60&quot;&gt;60&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L61&quot; rel=&quot;file-isgovtdown-py-L61&quot;&gt;61&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L62&quot; rel=&quot;file-isgovtdown-py-L62&quot;&gt;62&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L63&quot; rel=&quot;file-isgovtdown-py-L63&quot;&gt;63&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L64&quot; rel=&quot;file-isgovtdown-py-L64&quot;&gt;64&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L65&quot; rel=&quot;file-isgovtdown-py-L65&quot;&gt;65&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L66&quot; rel=&quot;file-isgovtdown-py-L66&quot;&gt;66&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L67&quot; rel=&quot;file-isgovtdown-py-L67&quot;&gt;67&lt;/span&gt;
            &lt;span class=&quot;line-number&quot; id=&quot;file-isgovtdown-py-L68&quot; rel=&quot;file-isgovtdown-py-L68&quot;&gt;68&lt;/span&gt;
          &lt;/td&gt;
          &lt;td class=&quot;line-data&quot;&gt;
            &lt;pre class=&quot;line-pre&quot;&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC1&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC2&quot;&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC3&quot;&gt;&lt;span class=&quot;c&quot;&gt;# file: isgovtdown.py&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC4&quot;&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC5&quot;&gt;&lt;span class=&quot;c&quot;&gt;# description: checks usa.gov for the &amp;quot;Government has shut down&amp;quot; message&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC6&quot;&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC7&quot;&gt;&lt;span class=&quot;c&quot;&gt;# usage: ./isgovtdown.py [pi]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC8&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Passing argument &amp;#39;pi&amp;#39; causes status LEDs to be used&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC9&quot;&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC10&quot;&gt;&lt;span class=&quot;c&quot;&gt;#  or in a crontab:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC11&quot;&gt;&lt;span class=&quot;c&quot;&gt;#  */5 * * * * /path/to/isgovtdown.py &amp;amp;&amp;amp; mailx -s 5s youremail@address.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC12&quot;&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC13&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC14&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC15&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC16&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GPIO&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC17&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC18&quot;&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC19&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC20&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC21&quot;&gt;  &lt;span class=&quot;n&quot;&gt;argMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC22&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC23&quot;&gt;    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC24&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC25&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC26&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC27&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC28&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC29&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC30&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Press Ctrl-C to cancel monitoring and admit you don&amp;#39;t care&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC31&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC32&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC33&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC34&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC35&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC36&quot;&gt;      &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Checking.....&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC37&quot;&gt;      &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC38&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC39&quot;&gt;      &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC40&quot;&gt;      &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC41&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC42&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# Add a delay for effect&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC43&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC44&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC45&quot;&gt;    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://usa.gov&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC46&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Due to a lapse in funding, the U.S. federal government has shut down&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC47&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC48&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Government still down&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC49&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC50&quot;&gt;        &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC51&quot;&gt;        &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC52&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC53&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC54&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC55&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Government back up&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC56&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC57&quot;&gt;        &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC58&quot;&gt;        &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC59&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC60&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC61&quot;&gt;&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC62&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC63&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC64&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC65&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC66&quot;&gt;    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC67&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-isgovtdown-py-LC68&quot;&gt;  &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
    &lt;div id=&quot;comments&quot; class=&quot;new-comments&quot;&gt;
      
&lt;div class=&quot;discussion-bubble js-comment-container&quot;&gt;
  &lt;img class=&quot;discussion-bubble-avatar&quot; src=&quot;https://2.gravatar.com/avatar/e46905069165b34d2f844ad9d021e749?d=https%3A%2F%2Fidenticons.github.com%2F26833d7fb4fd61bc27490a6ac5117918.png&amp;s=140&quot; width=&quot;48&quot; height=&quot;48&quot;&gt;
  &lt;div class=&quot;discussion-bubble-content bubble&quot;&gt;
    &lt;div class=&quot;discussion-bubble-inner&quot;&gt;

      &lt;div class=&quot;comment js-comment &quot; id=&quot;comment-921410&quot;&gt;
        &lt;div class=&quot;comment-header normal-comment-header&quot;&gt;
          &lt;a href=&quot;#&quot; class=&quot;comment-type-icon octicon octicon-comment&quot;&gt;&lt;/a&gt;
          &lt;a href=&quot;/sidwarkd&quot; class=&quot;comment-header-author&quot;&gt;sidwarkd&lt;/a&gt;
          &lt;span class=&quot;comment-header-action-text&quot;&gt;
            &lt;span id=&quot;gistcomment-921410&quot;&gt;
              &lt;a href=&quot;/sidwarkd/6814331/#comment-921410&quot;&gt;commented&lt;/a&gt;&lt;/span&gt;
          &lt;/span&gt;
          &lt;span class=&quot;comment-header-right&quot;&gt;
            &lt;span id=&quot;gistcomment-921410&quot;&gt;
              &lt;a href=&quot;/sidwarkd/6814331/#comment-921410&quot; class=&quot;comment-header-date&quot;&gt;
                &lt;time class=&quot;js-relative-date&quot; title=&quot;2013-10-03T19:02:23Z&quot; datetime=&quot;2013-10-03T19:02:23Z&quot;&gt;2013-10-03&lt;/time&gt;
              &lt;/a&gt;
            &lt;/span&gt;
          &lt;/span&gt;
        &lt;/div&gt;


        &lt;div class=&quot;comment-content&quot;&gt;
          &lt;div class=&quot;edit-comment-hide&quot;&gt;
            &lt;!-- &lt;div class=&quot;comment-form-error&quot;&gt;There has been an error&lt;/div&gt; --&gt;
            &lt;div class=&quot;comment-body markdown-body markdown-format js-comment-body&quot;&gt;
                &lt;p&gt;If you find this please be gentle on the code criticism. This is the first time I've written in Python.&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;

        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;/div&gt;
      &lt;p class=&quot;uncommentable&quot;&gt;&lt;span class=&quot;octicon octicon-alert&quot;&gt;&lt;/span&gt; Please &lt;a href=&quot;/login?return_to=/sidwarkd/6814331&quot; rel=&quot;nofollow&quot;&gt;sign in&lt;/a&gt; to comment on this gist.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

  &lt;div class=&quot;context-overlay&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class=&quot;slow-loading-overlay&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;

  &lt;div id=&quot;ajax-error-message&quot; class=&quot;flash flash-error&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;span class=&quot;octicon octicon-alert&quot;&gt;&lt;/span&gt;
      Something went wrong with that request. Please try again.
      &lt;a href=&quot;#&quot; class=&quot;octicon octicon-remove-close ajax-error-dismiss&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;footer&gt;
    &lt;div id=&quot;footer&quot;&gt;
  &lt;div class=&quot;container clearfix&quot;&gt;

    &lt;!-- Served fresh by github-fe103-cp1-prd.iad.github.net --&gt;
    &lt;p class=&quot;right&quot;&gt;&amp;copy; 2013 GitHub Inc. All rights reserved.&lt;/p&gt;
    &lt;a class=&quot;left&quot; href=&quot;/&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-mark-github&quot;&gt;&lt;/span&gt;
    &lt;/a&gt;
    &lt;ul id=&quot;legal&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;The GitHub Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;mailto:support@github.com&quot;&gt;Support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/div&gt;&lt;!-- /.container --&gt;
&lt;/div&gt;&lt;!-- /.#footer --&gt;

  &lt;/footer&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>




      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Love for the Beginners]]></title>
    <link href="http://blog.microcasts.tv/2013/08/19/some-love-for-the-beginners/"/>
    <updated>2013-08-19T21:41:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/08/19/some-love-for-the-beginners</id>
    <content type="html"><![CDATA[<h3>&ldquo;Read the Datasheet Again!&rdquo;</h3>

<p>That&rsquo;s what somebody told me on a forum once for not seeing a piece of information in a 90 page datasheet.  If there is one thing I&rsquo;ve learned after many years of doing hobbyist electronics it&rsquo;s that the various forums are NOT friendly places for beginners. I&rsquo;m subscribed to receive notices from multiple forums and everyday I see beginners taking heat for &ldquo;not reading the datasheet&rdquo; or &ldquo;not searching the forum.&rdquo;  It always amazes me how condescending people can be and how quickly they forget that at some point we were all beginners.</p>

<h3>Friend of Foe, You Choose</h3>

<p>I wish people would understand one simple fact.  It takes just as long to be a jerk as it does to make a new friend online.  Instead of answering somebody&rsquo;s questions with a condescending tone why not take the same amount of time to encourage and support.  Is is so hard to remember that everybody is on a different level as far as experience and knowledge go?  A lot of beginners have no idea that the answer is on page 73, paragraph 6 of the datasheet and publicly shaming them does nothing but boost your own shallow ego.  I&rsquo;m not sure why smart technical people who stereotypically faced a lot of bullying growing up turn to preying on people just looking for a little help.</p>

<h3>Play Nice</h3>

<p>So why the blog post?  Well, it really comes down to a simple thought.  Can we please just play nice?  Can we show some love to the beginners?  Next time you see a &ldquo;stupid noob&rdquo; question in a forum, step up and help out.  Welcome them to the community and please, whatever you do, don&rsquo;t treat him/her like an illiterate waste of your time because that &ldquo;idiot&rdquo; is an actual person on the other side of the interwebs just looking for some help.</p>

      ]]>

    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XC8: Problem Running Post-Install Step]]></title>
    <link href="http://blog.microcasts.tv/2013/08/09/xc8-problem-running-post-install-step/"/>
    <updated>2013-08-09T23:59:00-06:00</updated>
    <id>http://blog.microcasts.tv/2013/08/09/xc8-problem-running-post-install-step</id>
    <content type="html"><![CDATA[<p>While installing the Microchip XC8 compiler today on my Windows 8 machine I ran into an issue at the end of the install and got the following message box.</p>

<p><img src="http://blog.microcasts.tv/images/xc8_install_error.png"></p>

<p>I assume this is because the regsvr32.exe wasn&rsquo;t run with elevated privileges. If you get this error at the end of your install the fix is quite simple. We just need to run the failed command from an elevated privilege command prompt.  To do this right click on your Command Prompt icon (from your start page or do a search to find it) and select <em>&ldquo;Run As Administrator&rdquo;</em>.  This should open your command prompt window and default you to the <strong>System32</strong> folder. Without changing directories you simply run the failed command as it was listed in your error message.  In my case I ran:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>regsvr32.exe /s "C:\Program Files\Microchip\xc8\v1.12\bin\MPLABXC8.dll"</span></code></pre></td></tr></table></div></figure>


<p><strong>NOTE:</strong> Your path may be different so make sure you see what the error message says before closing it.</p>

      ]]>

    </content>
  </entry>
  
</feed>
